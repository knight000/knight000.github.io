<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我也不知道写了什么</title>
      <link href="/2020/01/22/whatamicoding/"/>
      <url>/2020/01/22/whatamicoding/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这里收录我写的一些迷惑东西</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="Warframe高价值警报查看"><a href="#Warframe高价值警报查看" class="headerlink" title="Warframe高价值警报查看"></a>Warframe高价值警报查看</h3><p>5分钟检测一次，会返回节点名字和数据，判断方法是非I系入侵和奖励数量为1，非常简陋。</p><p>不过能设置已拥有（也就是不提示）物件啊什么的。</p><p>已经写成了QQ机器人，已上传到Github。   </p><p><a href="https://github.com/knight000/WF_valuableInvasion_CoolQ" target="_blank" rel="noopener">https://github.com/knight000/WF_valuableInvasion_CoolQ</a> </p><p>异步是个好东西，可惜我不太会用….别再报错了啊!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetData</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 从网站上获取数据，获取到的是字典</span></span><br><span class="line">    url = <span class="string">"https://api.warframestat.us/pc/invasions"</span>  <span class="comment"># 直接获取入侵的数据</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">               <span class="string">'Chrome/51.0.2704.63 Safari/537.36'</span>&#125;</span><br><span class="line">    req = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    res = urllib.request.urlopen(req)</span><br><span class="line">    data = json.loads(res.read())</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetZh</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment"># 用于翻译</span></span><br><span class="line">    str(name)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"C:\\VScode\\WFA_Lexicon\\WFA_Lexicon\\WF_Dict.json"</span>, <span class="string">"r"</span>, encoding=<span class="string">"UTF-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 翻译文件来自https://github.com/Richasy/WFA_Lexicon</span></span><br><span class="line">        wfDictList = json.load(f)</span><br><span class="line">    <span class="keyword">for</span> list1 <span class="keyword">in</span> wfDictList:</span><br><span class="line">        wfDict = dict(list1)</span><br><span class="line">        <span class="keyword">if</span> wfDict[<span class="string">'en'</span>] == name:</span><br><span class="line">            <span class="keyword">return</span> wfDict[<span class="string">'zh'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CheckRepeat</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> id <span class="keyword">in</span> RepeatID:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        RepeatID.add(id)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">UseInvasionData</span><span class="params">(invasions)</span>:</span></span><br><span class="line">    <span class="comment"># 暂时只写了入侵的功能</span></span><br><span class="line">    <span class="comment"># invasions = data["invasions"] #以后可能要用，就留着了</span></span><br><span class="line">    ReturnData = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> invasions:</span><br><span class="line">        dict1 = dict(a)</span><br><span class="line">        <span class="keyword">if</span> CheckRepeat(dict1[<span class="string">'id'</span>]):</span><br><span class="line">            <span class="comment"># 去重</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> dict1[<span class="string">'completion'</span>] &lt;= <span class="number">0</span> <span class="keyword">or</span> dict1[<span class="string">'completion'</span>] &gt;= <span class="number">100</span>:</span><br><span class="line">            <span class="comment"># RepeatID.remove(dict1['id'])  # 去掉已过期的入侵，但是好像没必要就注释掉了</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> dict1[<span class="string">'vsInfestation'</span>] == <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 过滤掉I系相关的入侵，因为没有部件</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        attacker = dict(dict1[<span class="string">'attackerReward'</span>])</span><br><span class="line">        attackerItem = attacker[<span class="string">'countedItems'</span>]</span><br><span class="line">        attackerItem = dict(attackerItem[<span class="number">0</span>])</span><br><span class="line">        defender = dict(dict1[<span class="string">'defenderReward'</span>])</span><br><span class="line">        defenderItem = defender[<span class="string">'countedItems'</span>]</span><br><span class="line">        defenderItem = dict(defenderItem[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 这里是已拥有的就不提示</span></span><br><span class="line">        <span class="keyword">if</span> GetZh(attackerItem[<span class="string">'type'</span>]) <span class="keyword">in</span> Gotlist <span class="keyword">and</span> GetZh(defenderItem[<span class="string">'type'</span>]) <span class="keyword">in</span> Gotlist:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># if dict1['rewardTypes'] in highvalue:</span></span><br><span class="line">        <span class="keyword">if</span> attackerItem[<span class="string">'count'</span>] == <span class="number">1</span> <span class="keyword">or</span> defenderItem[<span class="string">'count'</span>] == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 用奖励的数量来判断是不是武器部件</span></span><br><span class="line">            node = dict1[<span class="string">'node'</span>]</span><br><span class="line">            completion = str(int(dict1[<span class="string">'completion'</span>]))</span><br><span class="line">            ReturnData = ReturnData+<span class="string">"节点:"</span>+node+<span class="string">"，奖励是:["</span> + \</span><br><span class="line">                GetZh(attackerItem[<span class="string">'type'</span>])+<span class="string">']和['</span> + \</span><br><span class="line">                GetZh(defenderItem[<span class="string">'type'</span>])+<span class="string">"]当前进度："</span>+completion+<span class="string">"%\n"</span></span><br><span class="line">            <span class="keyword">if</span> GetZh(attackerItem[<span class="string">'type'</span>]) <span class="keyword">in</span> Gotlist:</span><br><span class="line">                ReturnData = ReturnData + \</span><br><span class="line">                    <span class="string">"其中["</span>+GetZh(attackerItem[<span class="string">'type'</span>])+<span class="string">"]已拥有\n"</span></span><br><span class="line">            <span class="keyword">if</span> GetZh(defenderItem[<span class="string">'type'</span>]) <span class="keyword">in</span> Gotlist:</span><br><span class="line">                ReturnData = ReturnData + \</span><br><span class="line">                    <span class="string">"其中["</span>+GetZh(defenderItem[<span class="string">'type'</span>])+<span class="string">"]已拥有\n"</span></span><br><span class="line">    <span class="keyword">return</span> ReturnData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SaveList</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="comment"># 预留以后拿来添加已获取物件的功能</span></span><br><span class="line">    f = open(<span class="string">"data.list"</span>, <span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> data:</span><br><span class="line">        f.write(w+<span class="string">"\n"</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReadList</span><span class="params">()</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    f = open(<span class="string">"data.list"</span>, <span class="string">"r"</span>)</span><br><span class="line">    data = f.read()</span><br><span class="line">    data = data.splitlines()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Gotlist = ReadList()  <span class="comment"># 这里在文件data.list里填写已获得的物品中文名字，注意不要打错，要和WF_Dict.json里的一样，用回车键分隔开</span></span><br><span class="line">RepeatID = set()  <span class="comment"># 这里是记录已提醒的集合</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    check = UseInvasionData(GetData())</span><br><span class="line">    <span class="keyword">if</span> check != <span class="string">""</span>:</span><br><span class="line">        print(<span class="string">"现在时间是："</span>, time.asctime(time.localtime(time.time())))</span><br><span class="line">        print(<span class="string">"发现高价值入侵："</span>)</span><br><span class="line">        print(check)</span><br><span class="line">    time.sleep(<span class="number">300</span>)  <span class="comment"># 五分钟运行一次</span></span><br></pre></td></tr></table></figure><h3 id="蓝奏云上传QQbot"><a href="#蓝奏云上传QQbot" class="headerlink" title="蓝奏云上传QQbot"></a>蓝奏云上传QQbot</h3><p>命令<code>#upload</code></p><p>接收到命令的bot会调用<a href="https://github.com/zaxtyson/LanZouCloud-API" target="_blank" rel="noopener">LanZouCloud-API</a> ,把已下载的文件夹里的全部文件上传，因为API的特性不会上传子文件夹，所以调用os.system，把成功上传的文件都剪切到同个目录的文件夹<strong>已上传</strong>里，因为用的LanZouCloud-API能自动解决超出文件大小限制和可上传文件的限制，所以用这个方法上传的话应该不会出什么问题，至于客户端那边就用 <a href="https://github.com/zaxtyson/LanZouCloud-CMD" target="_blank" rel="noopener">LanZouCloud-CMD</a> 这个很成熟的工具解决。</p><blockquote><p>说不定以后能让机器人下载&gt;自动上传这样整，不过我是暂时不行的啦，现在瞎搞的机器人除了查wf和爬dxy之外就没什么自己写的功能了，上面说的功能还没开始写:D</p></blockquote><p>由于各种原因，此项目已废弃。</p><h3 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h3><p>这是备忘录不是黑历史记录器啊喂！</p><blockquote><p>因为没有酷Q Pro不能存图所以就没写图片保存</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nonebot <span class="keyword">import</span> on_command, CommandSession</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SaveList</span><span class="params">(data, fileID)</span>:</span></span><br><span class="line">    fileID = <span class="string">'memo\\'</span>+str(fileID)+<span class="string">'.txt'</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">'memo'</span>) == <span class="literal">False</span>:</span><br><span class="line">        os.mkdir(<span class="string">'memo'</span>)</span><br><span class="line">    f = open(fileID, <span class="string">"a"</span>)</span><br><span class="line">    f.write(data+<span class="string">"\n"</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReadList</span><span class="params">(fileID)</span>:</span></span><br><span class="line">    fileID = <span class="string">'memo\\'</span>+str(fileID)+<span class="string">'.txt'</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">'memo'</span>) == <span class="literal">False</span>:</span><br><span class="line">        os.mkdir(<span class="string">'memo'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(fileID, <span class="string">"r"</span>)</span><br><span class="line">    <span class="keyword">except</span> :</span><br><span class="line">        f = open(fileID, <span class="string">"w"</span>)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    data = []</span><br><span class="line">    data = f.read()</span><br><span class="line">    data = data.splitlines()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        removeNum = data.count(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(removeNum):</span><br><span class="line">            data.remove(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DelList</span><span class="params">(number, data, fileID)</span>:</span></span><br><span class="line">    <span class="keyword">del</span> data[number]</span><br><span class="line">    fileID = <span class="string">'memo\\'</span>+str(fileID)+<span class="string">'.txt'</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">'memo'</span>) == <span class="literal">False</span>:</span><br><span class="line">        os.mkdir(<span class="string">'memo'</span>)</span><br><span class="line">    f = open(fileID, <span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> data:</span><br><span class="line">        f.write(w+<span class="string">"\n"</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@on_command('SaveMemo', aliases=('memoadd', '添加备忘录'), only_to_me=False)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">SaveMemo</span><span class="params">(session: CommandSession)</span>:</span></span><br><span class="line">    user_id = session.ctx[<span class="string">'user_id'</span>]</span><br><span class="line">    session.state[<span class="string">'memo'</span>] = session.current_arg_text.strip()</span><br><span class="line">    memo = session.get(<span class="string">'memo'</span>, prompt=<span class="string">'请输入你要添加的备忘录'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        SaveList(memo, user_id)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        session.finish(<span class="string">'储存失败'</span>)</span><br><span class="line">    session.finish(<span class="string">'已储存至备忘录'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@on_command('ReadMemo', aliases=('memo', '读取备忘录', 'readmemo'), only_to_me=False)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">ReadMemo</span><span class="params">(session: CommandSession)</span>:</span></span><br><span class="line">    user_id = session.ctx[<span class="string">'user_id'</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user_name = session.ctx[<span class="string">'sender'</span>][<span class="string">'card'</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        user_name = session.ctx[<span class="string">'sender'</span>][<span class="string">'nickname'</span>]</span><br><span class="line">    read = ReadList(user_id)</span><br><span class="line">    <span class="keyword">if</span> read == []:</span><br><span class="line">        session.finish(<span class="string">'无备忘录记录'</span>)</span><br><span class="line">    message = user_name+<span class="string">"的备忘录记录为："</span></span><br><span class="line">    memonum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> read:</span><br><span class="line">        message += <span class="string">"\n["</span>+str(memonum)+<span class="string">"]"</span>+m</span><br><span class="line">        memonum += <span class="number">1</span></span><br><span class="line">    session.finish(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@on_command('DelMemo', aliases=('memodel', '删除备忘录', 'delmemo'), only_to_me=False)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">DelMemo</span><span class="params">(session: CommandSession)</span>:</span></span><br><span class="line">    user_id = session.ctx[<span class="string">'user_id'</span>]</span><br><span class="line">    session.state[<span class="string">'delmemo'</span>] = session.current_arg_text.strip()</span><br><span class="line">    delmemo = session.get(<span class="string">'delmemo'</span>, prompt=<span class="string">'请输入你要删除的备忘录序号'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        delmemo = int(delmemo)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        session.finish(<span class="string">'请输入数字'</span>)</span><br><span class="line">    read = ReadList(user_id)</span><br><span class="line">    <span class="keyword">if</span> delmemo &gt; len(read) - <span class="number">1</span>:</span><br><span class="line">        session.finish(<span class="string">'超出范围，删除失败'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            DelList(delmemo, read, user_id)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            session.finish(<span class="string">'删除失败'</span>)</span><br><span class="line">        session.finish(<span class="string">'删除备忘录成功'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@on_command('HelpMemo', aliases=('memohelp','备忘录帮助'), only_to_me=False)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">HelpMemo</span><span class="params">(session: CommandSession)</span>:</span></span><br><span class="line">    message = <span class="string">'#memoadd [备忘录内容]\n#添加备忘录 [备忘录内容]  添加备忘录\n#memo 读取备忘录 \n#readmemo  读取备忘录\n#memodel [序号]\n#删除备忘录 [序号]\n#delmemo [序号]  删除备忘录\n示例：\n#memoadd 这是一条备忘录\n#memodel 0'</span></span><br><span class="line">    session.finish(message)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉计划</title>
      <link href="/2019/10/28/projecteuler/"/>
      <url>/2019/10/28/projecteuler/</url>
      
        <content type="html"><![CDATA[<p>欧拉计划中文翻译站：<a href="https://pe-cn.github.io/" target="_blank" rel="noopener">https://pe-cn.github.io/</a><br>欧拉计划原站：<a href="https://projecteuler.net/" target="_blank" rel="noopener">https://projecteuler.net/</a><br>这里引用一下网站上的介绍：</p><blockquote><p>欧拉计划是一系列有挑战性的数学与计算机编程题；要解开它们，需要的不止是数学知识：尽管数学能够帮助你找到一些优雅而有效的方法，大多数题目仍需要借助计算机和编程技巧来完成解答。<br>创立欧拉计划的初衷，以及不断维持其运行的动力，在于为好奇的头脑提供一个平台，使他们能够在有趣愉悦的氛围中，探索未知领域，学习新的知识。</p></blockquote><p>总而言之，就是一些有趣的数学与编程题目，感谢<a href="http://toyomu.abn-team.top/" target="_blank" rel="noopener">@Toyomu</a>告诉了我这个网站。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>本篇中的原题翻译均来自<a href="https://pe-cn.github.io/" target="_blank" rel="noopener">欧拉计划中文翻译站</a></p></blockquote><p>解法非最佳解法，仅仅是自娱自乐（？？？）<br>提交答案之后，可以在<a href="https://projecteuler.net/archives" target="_blank" rel="noopener">这个页面</a>看到别人的解法。</p><h3 id="Problem-1-Multiples-of-3-and-5"><a href="#Problem-1-Multiples-of-3-and-5" class="headerlink" title="Problem 1 Multiples of 3 and 5"></a>Problem 1 Multiples of 3 and 5</h3><blockquote><p>3的倍数和5的倍数<br>如果我们列出10以内所有3或5的倍数，我们将得到3、5、6和9，这些数的和是23。<br>求1000以内所有3或5的倍数的和。</p></blockquote><p>直接用Python暴力…</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">3</span>==<span class="number">0</span> <span class="keyword">or</span> i%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">        s=s+i</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h3 id="Problem-2-Even-Fibonacci-numbers"><a href="#Problem-2-Even-Fibonacci-numbers" class="headerlink" title="Problem 2 Even Fibonacci numbers"></a>Problem 2 Even Fibonacci numbers</h3><blockquote><p>偶斐波那契数<br>斐波那契数列中的每一项都是前两项的和。由1和2开始生成的斐波那契数列前10项为：<br>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …<br>考虑该斐波那契数列中不超过四百万的项，求其中为偶数的项之和。</p></blockquote><p>依旧是Python暴力hh</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">2</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">4000000</span>:</span><br><span class="line">    i = a+b</span><br><span class="line">    a = b</span><br><span class="line">    b = i</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        s = s+i</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h3 id="Problem-3-Largest-prime-factor"><a href="#Problem-3-Largest-prime-factor" class="headerlink" title="Problem 3 Largest prime factor"></a>Problem 3 Largest prime factor</h3><blockquote><p>最大质因数<br>13195的所有质因数为5、7、13和29。<br>600851475143最大的质因数是多少？</p></blockquote><p>使用while和if语句就可以轻松实现</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">n = <span class="number">600851475143</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> n % a == <span class="number">0</span>:</span><br><span class="line">        b = a</span><br><span class="line">        n = n / a</span><br><span class="line">        <span class="keyword">while</span> n % a == <span class="number">0</span>:</span><br><span class="line">            n = n / a</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; math.sqrt(<span class="number">600851475143</span>)):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h3 id="Problem-4-Largest-palindrome-product"><a href="#Problem-4-Largest-palindrome-product" class="headerlink" title="Problem 4 Largest palindrome product"></a>Problem 4 Largest palindrome product</h3><blockquote><p>最大回文乘积<br>回文数就是从前往后和从后往前读都一样的数。由两个2位数相乘得到的最大回文乘积是 9009 = 91 × 99。<br>找出由两个3位数相乘得到的最大回文乘积。</p></blockquote><p>Python的切片十分简单，所以可以很轻易地验证是否为回文数。<br>通过for循环暴力…咳咳。<br>(特别鸣谢：<a href="http://toyomu.abn-team.top" target="_blank" rel="noopener">@Toyomu</a>))</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">asw = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">999</span>, <span class="number">100</span>, <span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">999</span>, <span class="number">100</span>, <span class="number">-1</span>):</span><br><span class="line">        lst = list(str(a*b))</span><br><span class="line">        <span class="keyword">if</span> lst == lst[::<span class="number">-1</span>]:</span><br><span class="line">            asw.append(a*b)</span><br><span class="line">print(max(asw))</span><br></pre></td></tr></table></figure><h3 id="Problem-5-Smallest-multiple"><a href="#Problem-5-Smallest-multiple" class="headerlink" title="Problem 5 Smallest multiple"></a>Problem 5 Smallest multiple</h3><blockquote><p>最小倍数<br>2520是最小的能够被1到10整除的数。<br>最小的能够被1到20整除的正数是多少？</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#20以内的素数有：2,3,5,7,11,13,17,19</span></span><br><span class="line"><span class="comment">#然后这些素数在20以内的最高次方的数是：16,9,5,7,11,13,17,19</span></span><br><span class="line"><span class="comment">#把这些相乘，得到结果</span></span><br><span class="line">print(<span class="number">16</span>*<span class="number">9</span>*<span class="number">5</span>*<span class="number">7</span>*<span class="number">11</span>*<span class="number">13</span>*<span class="number">17</span>*<span class="number">19</span>)</span><br></pre></td></tr></table></figure><h3 id="Problem-6-Sum-square-difference"><a href="#Problem-6-Sum-square-difference" class="headerlink" title="Problem 6 Sum square difference"></a>Problem 6 Sum square difference</h3><blockquote><p>平方的和与和的平方之差<br>前十个自然数的平方的和是<br>12 + 22 + … + 102 = 385<br>前十个自然数的和的平方是<br>(1 + 2 + … + 10)2 = 552 = 3025<br>因此前十个自然数的平方的和与和的平方之差是 3025 − 385 = 2640。<br>求前一百个自然数的平方的和与和的平方之差。</p></blockquote><p>非常简单，直接一个循环搞定</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">0</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    c = a ** <span class="number">2</span>+c</span><br><span class="line">    b = a+b</span><br><span class="line">print(b**<span class="number">2</span> - c)</span><br></pre></td></tr></table></figure><h3 id="Problem-7-10001st-prime"><a href="#Problem-7-10001st-prime" class="headerlink" title="Problem 7 10001st prime"></a>Problem 7 10001st prime</h3><blockquote><p>第10001个素数<br>列出前6个素数，它们分别是2、3、5、7、11和13。我们可以看出，第6个素数是13。<br>第10,001个素数是多少？</p></blockquote><p><a href="https://zh.moegirl.org/%E6%81%A9%E9%87%8C%E5%85%8B%C2%B7%E6%99%AE%E5%A5%87" target="_blank" rel="noopener"><strong>@普奇神父</strong></a>:“冷静下来，先数质数”<br>我们应该让Python很冷静的去数质数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">f = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">10001</span>:</span><br><span class="line">    a = a+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">2</span>, a, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> a % d == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        asw = a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="literal">True</span></span><br><span class="line">print(asw)</span><br></pre></td></tr></table></figure><h3 id="Problem-8-Largest-product-in-a-series"><a href="#Problem-8-Largest-product-in-a-series" class="headerlink" title="Problem 8 Largest product in a series"></a>Problem 8 Largest product in a series</h3><blockquote><p>连续数字最大乘积<br>在下面这个1000位正整数中，连续4个数字的最大乘积是 9 × 9 × 8 × 9 = 5832。<br>73167176531330624919225119674426574742355349194934<br>96983520312774506326239578318016984801869478851843<br>85861560789112949495459501737958331952853208805511<br>12540698747158523863050715693290963295227443043557<br>66896648950445244523161731856403098711121722383113<br>62229893423380308135336276614282806444486645238749<br>30358907296290491560440772390713810515859307960866<br>70172427121883998797908792274921901699720888093776<br>65727333001053367881220235421809751254540594752243<br>52584907711670556013604839586446706324415722155397<br>53697817977846174064955149290862569321978468622482<br>83972241375657056057490261407972968652414535100474<br>82166370484403199890008895243450658541227588666881<br>16427171479924442928230863465674813919123162824586<br>17866458359124566529476545682848912883142607690042<br>24219022671055626321111109370544217506941658960408<br>07198403850962455444362981230987879927244284909188<br>84580156166097919133875499200524063689912560717606<br>05886116467109405077541002256983155200055935729725<br>71636269561882670428252483600823257530420752963450<br>找出这个1000位正整数中乘积最大的连续13个数字。它们的乘积是多少？</p></blockquote><p>第一眼看过去….<br>冷静下来，想想，其实用python解决这个不太难<br>直接把所有数输进去再通过循环语句和判断语句来实现逐个相乘然后输出最大的乘积，其实也挺简单的。<br>（但是还是出了点小岔子…咳咳）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">que = list(str(<span class="number">7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450</span>))</span><br><span class="line">asw = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">988</span>):</span><br><span class="line">    cache = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">13</span>):</span><br><span class="line">        cache = cache*int(que[i+a])</span><br><span class="line">    <span class="keyword">if</span> asw &lt; cache:</span><br><span class="line">        asw = cache</span><br><span class="line">print(asw)</span><br></pre></td></tr></table></figure><h3 id="Problem-9-Special-Pythagorean-triplet"><a href="#Problem-9-Special-Pythagorean-triplet" class="headerlink" title="Problem 9 Special Pythagorean triplet"></a>Problem 9 Special Pythagorean triplet</h3><blockquote><p>特殊毕达哥拉斯三元组<br>毕达哥拉斯三元组是三个自然数a &lt; b &lt; c组成的集合，并满足<br>a2 + b2 = c2<br>例如，32 + 42 = 9 + 16 = 25 = 52。<br>有且只有一个毕达哥拉斯三元组满足 a + b + c = 1000。求这个三元组的乘积abc。</p></blockquote><p>当我第一眼看到的时候，想到的是两个字：暴力，于是写出了以下代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    b = a + <span class="number">1</span></span><br><span class="line">    c = b + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b &lt;= <span class="number">1000</span>-a-c:</span><br><span class="line">        <span class="keyword">while</span> c &lt;= <span class="number">1000</span>-a-b:</span><br><span class="line">            <span class="keyword">if</span> a**<span class="number">2</span>+b**<span class="number">2</span> == c**<span class="number">2</span> <span class="keyword">and</span> a+b+c == <span class="number">1000</span>:</span><br><span class="line">                print(a*b*c)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c = c + <span class="number">1</span></span><br><span class="line">        b = b + <span class="number">1</span></span><br><span class="line">        c = b + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>当然，答案是能算出来，不过时间嘛…<br>在Toyomu的启发下，优(重)化(写)了下，但还不是最佳解法就是了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">998</span>, <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>, c, <span class="number">1</span>):</span><br><span class="line">        a = <span class="number">1000</span>-b-c</span><br><span class="line">        <span class="keyword">if</span> a**<span class="number">2</span>+b**<span class="number">2</span> == c**<span class="number">2</span> <span class="keyword">and</span> a &gt; <span class="number">0</span>:</span><br><span class="line">            print(a*b*c)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="11题往后的-Toyomu的解法"><a href="#11题往后的-Toyomu的解法" class="headerlink" title="11题往后的@Toyomu的解法"></a>11题往后的@Toyomu的解法</h3><p><a href="http://toyomu.abn-team.top/" target="_blank" rel="noopener">请点这里，超棒的.jpg</a></p><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 欧拉计划 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO搭建博客，并发布到Github上</title>
      <link href="/2019/10/05/hexo-build/"/>
      <url>/2019/10/05/hexo-build/</url>
      
        <content type="html"><![CDATA[<h2 id="拥有一个GITHUB账号和仓库"><a href="#拥有一个GITHUB账号和仓库" class="headerlink" title="拥有一个GITHUB账号和仓库"></a>拥有一个GITHUB账号和仓库</h2><blockquote><p>如果你已经有了请跳过这一步骤</p></blockquote><h4 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h4><p>首先，进入<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>，你会看到以下的界面<br><img src="https://s2.ax1x.com/2019/10/05/uswY90.png" alt="Github注册界面"><br><strong>Username</strong>:是你账号显示的名称，也是别人搜索你的时候的名字，建立博客时也要用到，建议起一个简单好记的名字<br><strong>Email</strong>:可以用来登录之类的东西，不用解释了吧。<br><strong>Password</strong>:…记得设置的别太简单了，当然也不要把它忘了。<br>填写好了之后，点击下面的<strong>Sign up for Github</strong>，然后按照提示去做，你就拥有你的Github账户了。</p><h4 id="绑定SSH"><a href="#绑定SSH" class="headerlink" title="绑定SSH"></a>绑定SSH</h4><p>你需要安装一个Git，请<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">点击这里去官网下载</a><br>安装的时候一直默认就好，安装完成之后，打开CMD，Powershell或者Git Bash，依次输入以下3条指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的GitHub用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"你的GitHub注册邮箱"</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure><p>完成之后会自动在C:\Users[你的windows用户名]里面创建一个叫.ssh的文件夹，打开里面就多了3个文件：</p><blockquote><p>id_rsa<br>id_rsa.pub<br>known_hosts</p></blockquote><p>打开id_rsa.pub，把里面的内容复制，然后在<a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a>里面点击<strong>SSH and GPG keys</strong>，然后点击<strong>New SSH key</strong>这个绿框框，Title是标题，自己填个就好，在key一栏里面把你从id_rsa.pub里面复制的东西粘贴进去，点击<strong>Add SSH key</strong>，这样就添加成功了。<br>之后可以在你的计算机上输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><p>如果输出是</p><blockquote><p>PTY allocation request failed on channel 0<br>Hi 你的github用户名! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed.</p></blockquote><p>就证明你成功了</p><h4 id="建立你的repository"><a href="#建立你的repository" class="headerlink" title="建立你的repository"></a>建立你的repository</h4><p>点击New repository创建，名称为[你的用户名.github.io]，用户名就是之前创建时填的<strong>Username</strong>。<br>然后复制SSH，后面修改_config.yml会用到，拿来发布到github的时候用。<br><img src="https://s2.ax1x.com/2019/10/05/uswGhq.png" alt="Githubssh"></p><h2 id="安装Nodejs和hexo"><a href="#安装Nodejs和hexo" class="headerlink" title="安装Nodejs和hexo"></a>安装Nodejs和hexo</h2><p>首先，进入官网，下载nodejs，<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">点击这里进入nodejs官网</a><br>安装好之后，运行<strong>Node.js command prompt</strong>，输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>等待读条完毕后，创建一个<strong>空文件夹</strong>，然后使用cd [路径]或者直接shift+右键，点击在此处打开powershell或者命令提示符，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这样就完成了hexo的初始化<br>要测试的话，在这时候输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后在浏览器里输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>就能看到一个hexo的初始页面了。<br>记得安装github部署插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="设置-config-yml"><a href="#设置-config-yml" class="headerlink" title="设置_config.yml"></a>设置_config.yml</h2><p>进入你创建的博客文件夹，里面有一个文件，叫做_config.yml，它是你博客的配置文件，修改它，达到你所需要的效果。<br>以下讲一些基础的设置吧。<br><strong>title</strong>:网站的标题，显示在标签栏和网站中。<br><strong>subtitle</strong>:可以理解为副标题。<br><strong>description</strong>:网站描述，会显示在网站中。<br><strong>author</strong>:用户名，显示在网站中的各种地方。<br><strong>language</strong>:语言，这里填hexo主题所提供的语言包的名称，在themes\主题名称\languages这个目录下，有很多.yml文件，像是zh-CN.yml就在这一栏填写zh-CN<br><strong>timezone</strong>:时区，建议填写Asia/Shanghai<br>然后翻下去，找到<br><strong>theme</strong>:这里填写你的主题名称，主题可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>里面找到。<br>接下来就是设置<strong>deploy</strong>了，在文件中找到<strong>deploy</strong>这一栏，按照以下方式填写:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">之前复制的项目SSH</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>设置好之后记得保存。<br>这个时候输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后等读条完毕后访问[你的github用户名.github.io]就能看见你的页面了。</p><h2 id="安装并修改主题"><a href="#安装并修改主题" class="headerlink" title="安装并修改主题"></a>安装并修改主题</h2><p><strong>这里以NEXT主题为例</strong><br><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">主题Github</a><br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">主题官网</a><br>进入你的博客文件夹，打开命令窗口[cmd,powershell,gitbash都可以]，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>等待读条完毕，你就会发现你的博客文件夹里面的themes目录下，多了个next文件夹，进去修改_config.yml以达成你想要的效果，主题官网上已有强大的说明，这里就不再做叙述。</p><ul><li>注意大小写，特别是文件和图片的引用。</li></ul><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>若你要绑定域名，请在[你的博客文件夹\source]这个目录里面，新建一个 名为CNAME的文件[<strong>注意:无任何后缀名,可新建一个文本文档然后删除掉后缀名</strong>]，打开并编辑，把你要绑定的域名写进去，然后在域名提供商的解析那里设置CNAME，填上[你的github用户名.github.io]就可以了。<br>然后编辑_config.yml，找到<strong>skip_render:</strong>这一栏，把CNAME添加进去，如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">README.md</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">CNAME</span></span><br></pre></td></tr></table></figure><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>hexo的新建文章非常简单，在你的博客文件夹下，运行指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"文章名"</span></span><br></pre></td></tr></table></figure><p>就会自动在[你的博客文件夹\source_posts]创建一个[文章名.md]文件，使用markdown语法修改它，然后保存就可以了。<br>在生成的文章最上层，有默认生成的</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 你的文章名</span><br><span class="line">date: 生成的时间</span><br><span class="line">tags: 标签请自己填</span><br></pre></td></tr></table></figure><p>完善它。<br>完成后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后等读条完毕后访问你的博客地址就能看见了。<br>不过建议用hexo d发布前先用hexo s在本地预览一下情况。</p><h2 id="标签和归档"><a href="#标签和归档" class="headerlink" title="标签和归档"></a>标签和归档</h2><p>next主题有自带的标签和归档，但是你依然要用指令来生成他们</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page archives</span><br></pre></td></tr></table></figure><p>当你在文章里使用了标签，就会在生成页面的时候自动生成一个归档，不过你需要编辑source\tags目录下的index.md，使用如下方式来添加对标签归档页面的链接，当然，你可以添加更多元素在此页面上。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[标签名](/tags/标签名)</span></span><br></pre></td></tr></table></figure><h2 id="标签的使用"><a href="#标签的使用" class="headerlink" title="标签的使用"></a>标签的使用</h2><p>在你的博客文件夹下，运行指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure><p>然后进入[你的博客文件夹\source\tags]，修改 index.md文件以达到你想要的效果<br>在里面添加markdown语法的链接让进入此页面的人能进入到相关标签的页面</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">标签名</span>](<span class="link">/tags/标签名</span>)</span><br></pre></td></tr></table></figure><p>在主题的_config.yml文件里面，找到<strong>menu:</strong>这一栏，把#tags: /tags/ || tags前面的注释号去掉。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>如果添加了其他页面请也去掉前面的注释号。<br>添加标签请再文章最上面生成的tags:里面修改，如果要添加多个标签请这么写:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>标签1</span><br><span class="line"><span class="bullet">- </span>标签2</span><br><span class="line"><span class="bullet">- </span>标签3</span><br></pre></td></tr></table></figure><h2 id="加入Github-corners"><a href="#加入Github-corners" class="headerlink" title="加入Github-corners"></a>加入Github-corners</h2><p>什么是<strong>Github-corners</strong>？就是这个网页右上角的那个按钮，点击就可以跳转到你所需要的链接，以下链接能生成所需要代码: <a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">http://tholman.com/github-corners/ </a></p><p>然后在你的<strong>博客根目录\themes\主题\layout</strong>里面，找到<strong>_layout.swig</strong>，打开它，找到以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body itemscope itemtype=&quot;http://schema.org/WebPage&quot; lang=&quot;&#123;&#123; page.lang or page.language or config.language &#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;container&#123;%- if theme.motion.enable %&#125; use-motion&#123;%- endif %&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后把你从网页上复制的内容粘贴进去，再根据自己修改，比如这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body itemscope itemtype=&quot;http://schema.org/WebPage&quot; lang=&quot;&#123;&#123; page.lang or page.language or config.language &#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;container&#123;%- if theme.motion.enable %&#125; use-motion&#123;%- endif %&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;a href=&quot;你的GITHUB地址&quot; class=&quot;github-corner&quot; aria-label=&quot;View source on GitHub&quot;&gt;&lt;svg width=&quot;80&quot; height=&quot;80&quot; viewBox=&quot;0 0 250 250&quot; style=&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot; fill=&quot;currentColor&quot; style=&quot;transform-origin: 130px 106px;&quot; class=&quot;octo-arm&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot; fill=&quot;currentColor&quot; class=&quot;octo-body&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后发布就可以了。</p><h2 id="加入搜索功能"><a href="#加入搜索功能" class="headerlink" title="加入搜索功能"></a>加入搜索功能</h2><p>因为用第三方搜索效果虽然好，但是有点麻烦而且有因为第三方的问题导致失效的可能，所以这里介绍的是本地搜索的功能。</p><p><a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">https://github.com/wzpan/hexo-generator-search</a> </p><p>首先，在<strong>博客的文件夹</strong>执行安装指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>确定安装完毕后，在<strong>博客配置文件</strong>添加以下设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>上面的是默认设置，其中<strong>field</strong>这一栏决定了搜索的范围，个人是<strong>all</strong>，然后下面贴出官方的介绍</p><blockquote><ul><li><p><strong>path</strong> - file path. By default is <code>search.xml</code> . If the file extension is <code>.json</code>, the output format will be JSON. Otherwise XML format file will be exported.</p></li><li><p>field - the search scope you want to search, you can chose:</p><ul><li><strong>post</strong> (Default) - will only covers all the posts of your blog.</li><li><strong>page</strong> - will only covers all the pages of your blog.</li><li><strong>all</strong> - will covers all the posts and pages of your blog.</li></ul></li><li><p><strong>content</strong> - whether contains the whole content of each article. If <code>false</code>, the generated results only cover title and other meta info without mainbody. By default is <code>true</code>.</p></li></ul></blockquote><p>然后在<strong>主题配置文件</strong>找到<strong>local_search</strong>这一栏，<strong>enable</strong>改为true，其他根据自己需要修改，这里贴出我的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="bullet">-1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line"><span class="attr">  unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line"><span class="attr">  preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后部署，就能看到搜索按钮了</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>目前能写的大概也就这么多，以后想到什么再更新吧..</p>]]></content>
      
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/20/hello-world/"/>
      <url>/2019/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="目前只有这些标签"><a href="#目前只有这些标签" class="headerlink" title="目前只有这些标签"></a>目前只有这些标签</h1><ul><li><a href="/tags/杂谈">杂谈</a></li><li><a href="/tags/建站">建站</a></li><li><a href="/tags/hexo">hexo</a></li><li><a href="/tags/Github">Github</a></li><li><a href="/tags/欧拉计划">欧拉计划</a></li><li><a href="/tags/学习">学习</a></li><li><a href="/tags/Python">Python</a></li></ul>]]></content>
      
    </entry>
    
    
  
</search>
