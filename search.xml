<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些常用指令和技巧之类的</title>
      <link href="/2020/11/11/common/"/>
      <url>/2020/11/11/common/</url>
      
        <content type="html"><![CDATA[<p>记录一些常用的东东啥的</p><span id="more"></span><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="PUSH"><a href="#PUSH" class="headerlink" title="PUSH"></a>PUSH</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;v1.0.1&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="PULL"><a href="#PULL" class="headerlink" title="PULL"></a>PULL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><h3 id="FAST-API"><a href="#FAST-API" class="headerlink" title="FAST API"></a>FAST API</h3><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvicorn main:app --reload --port 80 --host 0.0.0.0</span><br></pre></td></tr></table></figure><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">origins = [</span><br><span class="line">    <span class="string">&quot;*&quot;</span></span><br><span class="line">]</span><br><span class="line">app.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=origins,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,</span><br><span class="line">    allow_methods=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">    allow_headers=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="POST以data接收"><a href="#POST以data接收" class="headerlink" title="POST以data接收"></a>POST以data接收</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    apikey: <span class="built_in">str</span></span><br><span class="line">    text: <span class="built_in">str</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_</span>(<span class="params">item:Item</span>):</span><br></pre></td></tr></table></figure><p>要先定义一个BaseModel然后在定义函数的时候使用他</p><h3 id="Windows-Shell"><a href="#Windows-Shell" class="headerlink" title="Windows Shell"></a>Windows Shell</h3><h4 id="查询指定端口占用"><a href="#查询指定端口占用" class="headerlink" title="查询指定端口占用"></a>查询指定端口占用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr &quot;PORT&quot;</span><br><span class="line">tasklist|findstr &quot;PID&quot;</span><br></pre></td></tr></table></figure><p>其实写了个python脚本来整这个，不过也一样</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><h5 id="强制重置虚拟机网卡"><a href="#强制重置虚拟机网卡" class="headerlink" title="强制重置虚拟机网卡"></a>强制重置虚拟机网卡</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl <span class="built_in">disable</span> NetworkManager</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="File"><a href="#File" class="headerlink" title="File"></a>File</h4><h5 id="当前工作目录"><a href="#当前工作目录" class="headerlink" title="当前工作目录"></a>当前工作目录</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.path.abspath(os.curdir)</span><br></pre></td></tr></table></figure><h4 id="NoneBot2"><a href="#NoneBot2" class="headerlink" title="NoneBot2"></a>NoneBot2</h4><h5 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nonebot <span class="keyword">import</span> on_command</span><br><span class="line"><span class="keyword">from</span> nonebot.adapters.cqhttp <span class="keyword">import</span> MessageSegment, Bot, Event</span><br><span class="line"></span><br><span class="line">command_name = on_command(<span class="string">&quot;指令名&quot;</span>)</span><br><span class="line"><span class="meta">@command_name.handle()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func_name</span>(<span class="params">bot: Bot, event: Event, state: <span class="built_in">dict</span></span>):</span><br><span class="line">    <span class="keyword">await</span> command_name.finish(<span class="string">&quot;message&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="base64编码图片并发送"><a href="#base64编码图片并发送" class="headerlink" title="base64编码图片并发送"></a>base64编码图片并发送</h5><p>网页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">web_image = requests.get(web[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;url&#x27;</span>], timeout=<span class="number">20</span>)</span><br><span class="line"><span class="keyword">if</span> web_image.status_code == <span class="number">200</span>:</span><br><span class="line">    images = <span class="string">f&quot;base64://<span class="subst">&#123;base64.b64encode(web_image.content).decode()&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">await</span> pic.finish(MessageSegment.image(images))</span><br></pre></td></tr></table></figure><p>本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;src\images\help.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    image = <span class="string">f&quot;base64://<span class="subst">&#123;base64.b64encode(f.read()).decode()&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">help</span> = on_command(<span class="string">&quot;help&quot;</span>)</span><br><span class="line"><span class="meta">@help.handle()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">help_func</span>(<span class="params">bot: Bot, event: Event, state: <span class="built_in">dict</span></span>):</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">help</span>.finish(MessageSegment.image(image))</span><br></pre></td></tr></table></figure><h4 id="Jupyter"><a href="#Jupyter" class="headerlink" title="Jupyter"></a>Jupyter</h4><blockquote><p>&#x2F;root&#x2F;.jupyter&#x2F;jupyter_notebook_config.py</p></blockquote><h5 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><h5 id="临时启动"><a href="#临时启动" class="headerlink" title="临时启动"></a>临时启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --ip=0.0.0.0 --no-browser --allow-root --notebook-dir=/home/python/jupyter-notebook</span><br></pre></td></tr></table></figure><h5 id="配置文件相关"><a href="#配置文件相关" class="headerlink" title="配置文件相关"></a>配置文件相关</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 允许notebook在root用户下运行.</span></span><br><span class="line">c.NotebookApp.allow_root = <span class="literal">True</span></span><br><span class="line"><span class="comment">## notebook服务会监听的IP地址.</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line"><span class="comment">## 用于笔记本和内核的目录。</span></span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">&#x27;/home/jupyter&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><p>datetime对象可以相互加减，然后通过<code>res.days</code>这样的方式来输出日期之类的。</p><h5 id="字符串格式化为datetime对象"><a href="#字符串格式化为datetime对象" class="headerlink" title="字符串格式化为datetime对象"></a>字符串格式化为datetime对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datetime.datetime.strptime(<span class="string">&quot;11月25日 01:26&quot;</span>,<span class="string">&quot;%m月%d日 %H:%M&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="替换参数"><a href="#替换参数" class="headerlink" title="替换参数"></a>替换参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用当前年份替换数据的年份</span></span><br><span class="line">datetime.replace(year=datetime.datetime.now().year)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在CentOS里升级到Python3.8</title>
      <link href="/2020/09/30/upgrade-py-centos/"/>
      <url>/2020/09/30/upgrade-py-centos/</url>
      
        <content type="html"><![CDATA[<h2 id="一切的开头"><a href="#一切的开头" class="headerlink" title="一切的开头"></a>一切的开头</h2><p>折腾了我这么多个小时…其实真的只是想试试Linux的编译安装…真的…折腾完后就把这些总结成这几个脚本</p><span id="more"></span><h2 id="编译安装Python3-8-6"><a href="#编译安装Python3-8-6" class="headerlink" title="编译安装Python3.8.6"></a>编译安装Python3.8.6</h2><p>虽然上面说是<strong>3.8.6</strong>，但是只要把<strong>3.8.6</strong>替换成别的版本理论上也是可以的（当然下面的脚本也一样，记得替换完全），然后<strong>CentOS</strong> 7自带的<strong>gcc</strong>版本过低，会导致编译错误，升级gcc的脚本在下面，然后成功后发现pip3无法下载，上网查了之后发现是因为没有加上<code>--with-ssl</code>这个参数，为防止失效，请使用<code>source</code>而不是<code>./</code>来调用脚本，其实用.&#x2F;也可以但要手动输入一次<code>source /etc/profile</code>，因为在另一种情况下这行会失效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为防止失效，请使用source 而不是./来调用脚本，其实用./也可以但要手动输入一次source /etc/profile</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum -y install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel xz xz-devel libffi-devel</span><br><span class="line"><span class="comment"># 下载最新的Python源码</span></span><br><span class="line">wget https://mirrors.huaweicloud.com/python/3.8.6/Python-3.8.6.tgz</span><br><span class="line">tar -xvf Python-3.8.6.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.8.6</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">./configure prefix=/usr/local/python3 --with-ssl</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="comment"># 添加环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PATH=\$PATH:/usr/local/python3/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">python3 -V</span><br></pre></td></tr></table></figure><h2 id="升级gcc到10-2-0"><a href="#升级gcc到10-2-0" class="headerlink" title="升级gcc到10.2.0"></a>升级gcc到10.2.0</h2><p>因为<strong>gcc</strong>版本过旧所以要升级，稍微修改了一下别人的脚本，但是没做错误退出，也就是说如果编译出错还是会执行下面的<code>mv</code>和<code>ln</code>，会导致再次运行脚本的时候会出错无法执行<code>make &amp;&amp; make install</code>，所以不确定的时候请把<code>mv</code>和<code>ln</code>注释掉。</p><p>另外请注意，编译安装<strong>gcc</strong>的时间十分漫长，大概<strong>3~4小时</strong>（也有可能是本人虚拟机没设置好的问题），总之，请耐心等待。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">yum -y install perl wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改自https://www.jianshu.com/p/89702b13bc51</span></span><br><span class="line"></span><br><span class="line">wget https://mirrors.ustc.edu.cn/gnu/gcc/gcc-10.2.0/gcc-10.2.0.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">tar -xvf gcc-10.2.0.tar.gz</span><br><span class="line"></span><br><span class="line">cd gcc-10.2.0</span><br><span class="line">./contrib/download_prerequisites</span><br><span class="line">cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立编译输出目录</span></span><br><span class="line">mkdir gcc-build-10.2.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入下面目录，执行命令，生成Makefile文件</span></span><br><span class="line">cd gcc-build-10.2.0</span><br><span class="line">../gcc-10.2.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行命令进行编译，此处利用4个job，需编译时约40分钟，此值不宜设置过高</span></span><br><span class="line">make -j4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">mv /usr/bin/gcc /usr/bin/gcc.old</span><br><span class="line">mv /usr/bin/g++ /usr/bin/g++.old</span><br><span class="line">mv /usr/bin/cpp /usr/bin/cpp.old</span><br><span class="line">mv /usr/bin/c++ /usr/bin/c++.old</span><br><span class="line">ln /usr/local/bin/gcc /usr/bin/gcc</span><br><span class="line">ln /usr/local/bin/g++ /usr/bin/g++</span><br><span class="line">ln /usr/local/bin/cpp /usr/bin/cpp</span><br><span class="line">ln /usr/local/bin/c++ /usr/bin/c++</span><br><span class="line"></span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure><h2 id="整合，同时升级gcc和python"><a href="#整合，同时升级gcc和python" class="headerlink" title="整合，同时升级gcc和python"></a>整合，同时升级gcc和python</h2><p>rt，开头已预计安装一堆依赖。然后因为升级<code>gcc</code>要花费很多的时间…所以，耐心的等待吧。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">为防止失效，请使用<span class="built_in">source</span>而不是./来调用脚本，其实用./也可以但要手动输入一次<span class="built_in">source</span> /etc/profile</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装依赖</span></span><br><span class="line">yum -y install perl wget zlib-devel bzip2 bzip2-devel readline-devel sqlite</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Gcc升级部分修改自https://www.jianshu.com/p/89702b13bc51</span></span><br><span class="line"></span><br><span class="line">wget https://mirrors.ustc.edu.cn/gnu/gcc/gcc-10.2.0/gcc-10.2.0.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">tar -xvf gcc-10.2.0.tar.gz</span><br><span class="line"></span><br><span class="line">cd gcc-10.2.0</span><br><span class="line">./contrib/download_prerequisites</span><br><span class="line">cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立编译输出目录</span></span><br><span class="line">mkdir gcc-build-10.2.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入下面目录，执行命令，生成Makefile文件</span></span><br><span class="line">cd gcc-build-10.2.0</span><br><span class="line">../gcc-10.2.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行命令进行编译，此处利用4个job，需编译时约40分钟，此值不宜设置过高</span></span><br><span class="line">make -j4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">mv /usr/bin/gcc /usr/bin/gcc.old</span><br><span class="line">mv /usr/bin/g++ /usr/bin/g++.old</span><br><span class="line">mv /usr/bin/cpp /usr/bin/cpp.old</span><br><span class="line">mv /usr/bin/c++ /usr/bin/c++.old</span><br><span class="line">ln /usr/local/bin/gcc /usr/bin/gcc</span><br><span class="line">ln /usr/local/bin/g++ /usr/bin/g++</span><br><span class="line">ln /usr/local/bin/cpp /usr/bin/cpp</span><br><span class="line">ln /usr/local/bin/c++ /usr/bin/c++</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载最新的Python源码</span></span><br><span class="line">wget https://mirrors.huaweicloud.com/python/3.8.6/Python-3.8.6.tgz</span><br><span class="line">tar -xvf Python-3.8.6.tgz</span><br><span class="line">cd Python-3.8.6</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译安装</span></span><br><span class="line">./configure prefix=/usr/local/python3 --with-ssl</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加环境变量</span></span><br><span class="line">echo &quot;PATH=\$PATH:/usr/local/python3/bin&quot; &gt;&gt; /etc/profile</span><br><span class="line">echo &quot;export PATH&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">gcc -v</span><br><span class="line">python3 -V</span><br></pre></td></tr></table></figure><h3 id="附赠编译升级openssl的脚本"><a href="#附赠编译升级openssl的脚本" class="headerlink" title="附赠编译升级openssl的脚本"></a>附赠编译升级openssl的脚本</h3><p>顺手做了，升级至1_1_1h</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改自https://www.cnblogs.com/cobcmw/p/11137712.html</span></span><br><span class="line"></span><br><span class="line">yum -y install perl</span><br><span class="line">wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1h.tar.gz</span><br><span class="line">tar xzvf ./OpenSSL_1_1_1h.tar.gz</span><br><span class="line">cd openssl-OpenSSL_1_1_1h/</span><br><span class="line">./config</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">mv /usr/bin/openssl /usr/bin/openssl.old</span><br><span class="line">ln -s /usr/local/bin/openssl /usr/bin/openssl</span><br><span class="line">ln -s /usr/local/lib64/libssl.so.1.1 /usr/lib64/</span><br><span class="line">ln -s /usr/local/lib64/libcrypto.so.1.1 /usr/lib64/</span><br><span class="line"></span><br><span class="line">openssl version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在heroku部署discord.py bot</title>
      <link href="/2020/08/08/heroku-discord-bot/"/>
      <url>/2020/08/08/heroku-discord-bot/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/knight000/heroku_discordBOT">https://github.com/knight000/heroku_discordBOT</a></p><p>    <a href="https://dashboard.heroku.com/new?template=https%3a%2f%2fgithub.com%2fknight000%2fheroku_discordBOT" rel="nofollow">    <img src="https://camo.githubusercontent.com/c0824806f5221ebb7d25e559568582dd39dd1170/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e706e67" alt="Deploy" data-canonical-src="https://www.herokucdn.com/deploy/button.png" style="max-width:100%;"></a></p><p>感谢<a href="http://toyomu.abn-team.top/">Toyomu</a>和<a href="https://kiki.abn-team.top/">kickkick</a>提供的部分源码和支持。</p><p><a href="https://discordpy.readthedocs.io/">discord.py官方文档</a></p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文(?)"></a>正文(?)</h2><h3 id="插件加载器"><a href="#插件加载器" class="headerlink" title="插件加载器"></a>插件加载器</h3><p><code>dsc_bot.py</code>里是<strong>插件加载器</strong>，把写好的插件放在plugins文件夹里面就会自动加载，当然作者不是我..</p><p>文件里用到的环境变量之类的可以在app.json里设置，使用环境变量能在开源的前提下保护自己的APIkey和TOKEN，或者让用户直观的自定义一些参数，在插件里请使用<code>os</code>模块的<code>os.environ[&#39;变量名&#39;]</code>来调用，请参照<a href="https://devcenter.heroku.com/articles/app-json-schema">官方文档</a>或者直接参照项目内的文件。</p><h3 id="help指令"><a href="#help指令" class="headerlink" title="help指令"></a>help指令</h3><p>discord.py支持自动生成help文档，可以在命令里传入参数help&#x3D;‘’或者用多行字符串来写，会自动提取为帮助文档，<code>Category</code>的help文档也是，只输入help获取的帮助只有多行字符串的第一行，help [指令]能获取详细的帮助。</p><h3 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h3><p>设置<code>Category</code>可以让help生成时自动分类，也可以让你开发新指令时不用再次添加<code>bot.add_command</code>，具体请看以下demo。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> discord</span><br><span class="line"><span class="keyword">from</span> discord.ext <span class="keyword">import</span> commands</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">demo</span>(commands.Cog):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    这里是Category的帮助文档</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">    @commands.command(<span class="params">name=<span class="string">&quot;test&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self,ctx</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        这里是指令的帮助文档</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">await</span> ctx.send(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">bot</span>):</span><br><span class="line">    bot.add_cog(demo())</span><br></pre></td></tr></table></figure><p>由于<code>Category</code>是类，所以编写的时候请记得传入<code>self</code></p><h3 id="embed"><a href="#embed" class="headerlink" title="embed"></a>embed</h3><p>discord不但支持markdown，还支持embed嵌入元素，甚至可以在embed里使用markdown来达成美妙的效果。更多请参考<a href="https://discordpy.readthedocs.io/en/latest/api.html?highlight=embed#discord.Embed">官方文档</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">embed_box = discord.Embed(title=<span class="string">&#x27;demo&#x27;</span>,description=<span class="string">&#x27;hello world&#x27;</span>, url=<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br><span class="line">embed_box.set_image(url=<span class="string">&#x27;https://www.python.org/static/img/python-logo@2x.png&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> ctx.send(embed=embed_box)</span><br></pre></td></tr></table></figure><p>title:embed的标题</p><p>url:点击标题所跳转的链接</p><p>set_image:为embed嵌入一张图片</p><h3 id="image的一点注意事项"><a href="#image的一点注意事项" class="headerlink" title="image的一点注意事项"></a>image的一点注意事项</h3><p>discord当然可以发图，但是这是以<strong>BytesIO</strong>为形式发送文件，如果是网页上的图片的话，与其用requests爬下来再发送不如直接嵌入在embed里。如果需要发送图片请用<strong>BytesIO</strong>处理后再发送。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">web_image = requests.get(url)</span><br><span class="line"><span class="keyword">await</span> ctx.send(file=discord.File(BytesIO(web_image.content), filename=<span class="string">&#x27;demo&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="同步github和heroku的更改并自动部署"><a href="#同步github和heroku的更改并自动部署" class="headerlink" title="同步github和heroku的更改并自动部署"></a>同步github和heroku的更改并自动部署</h2><p>首先，进入你的<a href="https://dashboard.heroku.com/apps"><strong>heroku dashboard</strong></a>，点击你的应用然后进入<strong>Deploy</strong>界面</p><p>然后<strong>Deployment method</strong>选择<strong>Github</strong>，链接你的Github账户，在<strong>App connected to GitHub</strong>里选择你存放APP的仓库并链接，并开启<strong>Automatic deploys</strong>，至此设置完成，当你push到github时heroku也会同步更新，当然也可以切换分支什么的，更多的就等你们自己探索了，毕竟我也只是刚刚接触heroku。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>油猴脚本对Onclick事件的处理</title>
      <link href="/2020/06/29/Tampermonkey-Onclick/"/>
      <url>/2020/06/29/Tampermonkey-Onclick/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在脚本中定义函数<code>function abc()&#123; alert(&quot;helloWorld&quot;); &#125;</code>,注入onclick事件<code>&lt;a id=&quot;a&quot; onclick=&quot;abc();&quot;&gt;HelloWorld&lt;/a&gt;</code>。 爆出函数未定义的错误Function is not defined。 在<a href="http://forums.mozillazine.org/viewtopic.php?p=2007224">mozillazine</a>了解到Tampermonkey的js脚本是在sandbox中的，在html中访问不到。 使用下面的例子可以完成这个功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unsafeWindow.<span class="property">abc</span> = <span class="keyword">function</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(msg);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>).<span class="property">onclick</span> = <span class="string">&quot;window.abc(&#x27;helloWorld&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>转自<a href="https://github.com/Ahaochan/Tampermonkey">Github</a></p></blockquote><p>总之就是如果要在页面插入一个按钮，要用到onclick事件触发的话，需要用windows来把函数注入进去，<code>windows.</code>后面跟的是你需要调用的函数名称，然后onclick再通过这个名称来调用它。</p><span id="more"></span><h2 id="以下是碎碎念，记录自己折腾的时间"><a href="#以下是碎碎念，记录自己折腾的时间" class="headerlink" title="以下是碎碎念，记录自己折腾的时间"></a>以下是碎碎念，记录自己折腾的时间</h2><p>steam夏促了，于是我就找到了论坛上的脚本，自动过<strong>Steam探索队列</strong>，但作者所提供的版本是<strong>没有开关</strong>的，每次进去steam就会弹出<em>已完成探索队列</em>的提示，于是乎自己就打算修改下这个脚本，把他在steam上弄个按钮，点击就会执行。然后就开始操作了，当我写完后，测试，点击按钮，好，没反应。控制台报错。然后经过查找资料后，发现了上面的东西，因为油猴脚本是在沙箱里运行的，所以在html里无法访问。修改后就可以正常使用了。按钮位置在<strong>安装Steam</strong>按钮旁边，直接用了他的样式。</p><blockquote><p>20&#x2F;8&#x2F;21更新：发现[安装Steam]按钮会因为已登录steam客户端隐藏，所以改在了信息的旁边，其实还是原来差不多的位置。</p></blockquote><p>原版在<a href="https://keylol.com/t157861-1-1">帖子</a>里，需要自取。</p><p>修改的不多就不把自己加到作者名里了。</p><h2 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         Steam自动探索队列</span></span><br><span class="line"><span class="comment">// @namespace    https://keylol.com/t157861-1-1</span></span><br><span class="line"><span class="comment">// @version      0.1.1</span></span><br><span class="line"><span class="comment">// @description  Steam节庆活动用脚本，自动探索3次队列。</span></span><br><span class="line"><span class="comment">// @author       baodongsun</span></span><br><span class="line"><span class="comment">// @match        https://store.steampowered.com/</span></span><br><span class="line"><span class="comment">// @grant        SteamCN</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> butt = $J(<span class="string">&#x27;&lt;a/&gt;&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;header_installsteam_btn_content &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;auto_exploration&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;href&#x27;</span>: <span class="string">&#x27;javascript:void(0);&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;onclick&#x27;</span>: <span class="string">&#x27;auto_exploration()&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">text</span>(<span class="string">&#x27;自动探索&#x27;</span>);</span><br><span class="line">    $J(<span class="string">&#x27;div[id=&quot;header_notification_area&quot;]&#x27;</span>).<span class="title function_">prepend</span>(butt);</span><br><span class="line">    <span class="comment">// 主体内容</span></span><br><span class="line">    unsafeWindow.<span class="property">auto_exploration</span> = <span class="keyword">function</span> <span class="title function_">auto_exploration</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> appids,</span><br><span class="line">            running = <span class="literal">true</span>,</span><br><span class="line">            queueNumber,</span><br><span class="line">            progressDialog = <span class="title class_">ShowAlertDialog</span>(<span class="string">&#x27;探索中&#x27;</span>, $J(<span class="string">&#x27;&lt;div/&gt;&#x27;</span>).<span class="title function_">append</span>($J(<span class="string">&#x27;&lt;div/&gt;&#x27;</span>, &#123;</span><br><span class="line">                <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;waiting_dialog_throbber&#x27;</span></span><br><span class="line">            &#125;)).<span class="title function_">append</span>($J(<span class="string">&#x27;&lt;div/&gt;&#x27;</span>, &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;progressContainer&#x27;</span></span><br><span class="line">            &#125;).<span class="title function_">text</span>(<span class="string">&#x27;获取进度...&#x27;</span>)), <span class="string">&#x27;停止&#x27;</span>).<span class="title function_">done</span>(abort);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">abort</span>(<span class="params"></span>) &#123;</span><br><span class="line">            running = <span class="literal">false</span>;</span><br><span class="line">            progressDialog.<span class="title class_">Dismiss</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">retry</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">abort</span>();</span><br><span class="line">            <span class="title class_">ShowConfirmDialog</span>(<span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;是否重试?&#x27;</span>, <span class="string">&#x27;重试&#x27;</span>, <span class="string">&#x27;放弃&#x27;</span>).<span class="title function_">done</span>(auto_exploration)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">clearApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!running)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="title function_">showProgress</span>();</span><br><span class="line">            <span class="keyword">var</span> appid = appids.<span class="title function_">shift</span>();</span><br><span class="line">            !appid ? <span class="title function_">generateQueue</span>() : $J.<span class="title function_">post</span>(appids.<span class="property">length</span> ? <span class="string">&#x27;/app/&#x27;</span> + appid : <span class="string">&#x27;/explore/next/&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">sessionid</span>: g_sessionID,</span><br><span class="line">                <span class="attr">appid_to_clear_from_queue</span>: appid</span><br><span class="line">            &#125;).<span class="title function_">done</span>(clearApp).<span class="title function_">fail</span>(retry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">generateQueue</span>(<span class="params"></span>) &#123;</span><br><span class="line">            running &amp;&amp; $J.<span class="title function_">post</span>(<span class="string">&#x27;/explore/generatenewdiscoveryqueue&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">sessionid</span>: g_sessionID,</span><br><span class="line">                <span class="attr">queuetype</span>: <span class="number">0</span></span><br><span class="line">            &#125;).<span class="title function_">done</span>(beginQueue).<span class="title function_">fail</span>(retry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">beginQueue</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!running)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            $J.<span class="title function_">get</span>(<span class="string">&#x27;/explore/&#x27;</span>).<span class="title function_">done</span>(<span class="keyword">function</span> (<span class="params">htmlText</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> cardInfo = htmlText.<span class="title function_">match</span>(<span class="regexp">/&lt;div class=&quot;subtext&quot;&gt;\D+(\d)\D+&lt;\/div&gt;/</span>);</span><br><span class="line">                <span class="keyword">if</span> (!cardInfo) &#123;</span><br><span class="line">                    <span class="title function_">abort</span>();</span><br><span class="line">                    <span class="title class_">ShowAlertDialog</span>(<span class="string">&#x27;完成&#x27;</span>, <span class="string">&#x27;已完成全部探索队列&#x27;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> matchedAppids = htmlText.<span class="title function_">match</span>(<span class="regexp">/0,\s+(\[.*\])/</span>);</span><br><span class="line">                <span class="keyword">if</span> (!matchedAppids) &#123;</span><br><span class="line">                    <span class="title function_">retry</span>();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                appids = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(matchedAppids[<span class="number">1</span>]);</span><br><span class="line">                queueNumber = cardInfo[<span class="number">1</span>];</span><br><span class="line">                appids.<span class="property">length</span> == <span class="number">0</span> ? <span class="title function_">generateQueue</span>() : <span class="title function_">clearApp</span>();</span><br><span class="line">                <span class="title function_">showProgress</span>();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">showProgress</span>(<span class="params"></span>) &#123;</span><br><span class="line">            $J(<span class="string">&#x27;#progressContainer&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;&lt;br&gt;剩余&#x27;</span> + queueNumber + <span class="string">&#x27;个待探索队列, 当前队列剩余&#x27;</span> + appids.<span class="property">length</span> + <span class="string">&#x27;个待探索游戏&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">beginQueue</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成包含多域名的自签名证书</title>
      <link href="/2020/05/06/create-openssl-certificate/"/>
      <url>/2020/05/06/create-openssl-certificate/</url>
      
        <content type="html"><![CDATA[<h2 id="一切的开始"><a href="#一切的开始" class="headerlink" title="一切的开始"></a>一切的开始</h2><p>为什么会写下这篇blog呢？<del>才不是因为好久没写blog想写点什么呢</del></p><p>因为我想给我的Nginx小工具加点功能，至于为什么要用到证书呢…这个就不深入说了。</p><span id="more"></span><h3 id="需要准备的东西"><a href="#需要准备的东西" class="headerlink" title="需要准备的东西"></a>需要准备的东西</h3><p>首先，你需要一个<a href="http://slproweb.com/products/Win32OpenSSL.html"><strong>openssl</strong></a>，下载安装后如果输入指令没反应请尝试重启电脑&#x2F;添加环境变量这样的基本操作，当然直接使用<strong>OpenSSL Command Prompt</strong>也是不错的选择。</p><p>然后，你需要一个趁手的<strong>文本编辑器</strong>，这里推荐的是<a href="https://code.visualstudio.com/">VSCode</a>和<a href="https://notepad-plus-plus.org/">Notepad++</a>。</p><p>一切就绪后，弄一个空文件夹，然后找到openssl安装目录，把<code>bin\cnf</code>里面的样板cnf拷贝出来，也就是<code>openssl.cnf</code></p><h2 id="那么开始吧"><a href="#那么开始吧" class="headerlink" title="那么开始吧"></a>那么开始吧</h2><h3 id="修改-cnf"><a href="#修改-cnf" class="headerlink" title="修改.cnf"></a>修改.cnf</h3><p>首先，你需要修改刚刚拷贝过来的<code>openssl.cnf</code></p><p>在<code>[ req ]</code>里增加<code>req_extensions = v3_req</code></p><p>把<code>[ req_distinguished_name ]</code>下所有代有<code>0.</code>开头的<code>0.</code>去掉</p><p>在<code>[ v3_req ]</code>里新增<code>subjectAltName = @alt_names</code></p><p>在<code>[ CA_default ]</code>和<code>[ tsa_config1 ]</code>里的<code>dir</code>一栏，把里面的示例路径换成你新建文件夹的路径</p><blockquote><p>虽然不知道有没有影响但是<strong>非常不建议用中文路径</strong></p></blockquote><p>然后就是重点了，要生成包含多域名的证书，在cnf底部加上<code>[ alt_names ]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ alt_names ]</span><br><span class="line">DNS.1=第一个域名</span><br><span class="line">DNS.2=第二个域名</span><br><span class="line">DNS.N=第N个域名</span><br></pre></td></tr></table></figure><p>这样就设置好了，注意，域名可以跟Nginx里一样像<code>*. example.com</code>写。</p><h3 id="进入证书生成步骤"><a href="#进入证书生成步骤" class="headerlink" title="进入证书生成步骤"></a>进入证书生成步骤</h3><blockquote><p>注意，本节的指令均在新建的文件夹里运行</p></blockquote><h4 id="生成必须文件"><a href="#生成必须文件" class="headerlink" title="生成必须文件"></a>生成必须文件</h4><p>在文件夹里新建一个名为index的<strong>文本文档</strong><code>index.txt</code></p><p>在文件夹里新建一个名为serial的<strong>文件</strong><code>serial</code>，并且里面要有ANSI编码的<code>00</code></p><p>注意:</p><ul><li>如果是在windows10环境下使用<code>echo 00 &gt; serial</code>来创建serial文件的，默认编码不是ANSI所以会导致后面报错</li></ul><h4 id="生成ca证书和密钥"><a href="#生成ca证书和密钥" class="headerlink" title="生成ca证书和密钥"></a>生成ca证书和密钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa 2048 &gt; ca.key</span><br><span class="line">openssl req -new -x509 -days 3650 -keyout ca.key -out ca.crt -config openssl.cnf</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这一步会要求设置密码，如果密码过短会报错。</li></ul><h4 id="使用ca证书生成server证书和签名请求"><a href="#使用ca证书生成server证书和签名请求" class="headerlink" title="使用ca证书生成server证书和签名请求"></a>使用ca证书生成server证书和签名请求</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line">openssl req -new -key server.key -out server.csr -config openssl.cnf</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这一步的<code>Common Name </code>请写上<code>[ alt_names ]</code>里的其中一个域名，(server)的名字不重要，这里也可以改成你想要的其他名字</li></ul><h4 id="签署server-crt"><a href="#签署server-crt" class="headerlink" title="签署server.crt"></a>签署server.crt</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ca -<span class="keyword">in</span> server.csr -out server.crt -cert ca.crt -keyfile ca.key -extensions v3_req -config openssl.cnf</span><br></pre></td></tr></table></figure><p>这里会要求输入你生成ca的时候设置的密码。一路y下去之后就完成了。</p><h4 id="Nginx的一些设置"><a href="#Nginx的一些设置" class="headerlink" title="Nginx的一些设置"></a>Nginx的一些设置</h4><p>把你生成好的证书和密钥放进<strong>nginx</strong>的<code>conf/</code>文件夹里，当然这里建议单独建立一个文件夹来存放证书，然后就可以通过修改<code>nginx.conf</code>来愉快的使用https了。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">ssl_certificate</span> ca/server.crt;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> ca/server.key;</span><br></pre></td></tr></table></figure><h4 id="结束了"><a href="#结束了" class="headerlink" title="结束了"></a>结束了</h4><p>为了方便，也可以把签署的指令写在批处理文件里，比如这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">@<span class="built_in">echo</span> password:不记得密码的话可以写在这里提醒自己</span><br><span class="line">openssl ca -<span class="keyword">in</span> server.csr -out server.crt -cert ca.crt -keyfile ca.key -extensions v3_req -config openssl.cnf</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>这样修改完<code>openssl.cnf</code>后，就可以很方便的签署证书了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://blog.51cto.com/colinzhouyj/1566438">https://blog.51cto.com/colinzhouyj/1566438</a> </p><p><a href="https://blog.csdn.net/shasharoman/article/details/79577975">https://blog.csdn.net/shasharoman/article/details/79577975</a> </p><p><a href="https://blog.51cto.com/colinzhouyj/1564916">https://blog.51cto.com/colinzhouyj/1564916</a> </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我也不知道写了什么</title>
      <link href="/2020/01/22/whatamicoding/"/>
      <url>/2020/01/22/whatamicoding/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这里收录我写的一些迷惑东西，现在主要是神奇的想法还有一些坑</p><span id="more"></span><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="Windows下查询指定端口占用"><a href="#Windows下查询指定端口占用" class="headerlink" title="Windows下查询指定端口占用"></a>Windows下查询指定端口占用</h3><p>感觉没啥必要不过就当作是练练subprocess吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">PORT = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查询的端口号：&#x27;</span>)</span><br><span class="line">netstat = subprocess.check_output(</span><br><span class="line">    <span class="string">f&#x27;netstat -ano|findstr \&quot;<span class="subst">&#123;PORT&#125;</span>\&quot;|findstr \&quot;LISTENING\&quot;&#x27;</span>, shell=<span class="literal">True</span>).decode(<span class="string">&quot;utf-8&quot;</span>).split() <span class="comment"># 用已封装好的方法</span></span><br><span class="line"><span class="keyword">if</span> netstat == []:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;端口未被占用&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;端口号包含<span class="subst">&#123;PORT&#125;</span>,查询开始&#x27;</span>,end=<span class="string">&quot;\n&lt;-------------------------------------------------------------------------&gt;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(netstat), <span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">f&#x27;协议:<span class="subst">&#123;netstat[i+<span class="number">0</span>]&#125;</span>  本地地址:<span class="subst">&#123;netstat[i+<span class="number">1</span>]&#125;</span>  外部地址:<span class="subst">&#123;netstat[i+<span class="number">2</span>]&#125;</span>  PID:<span class="subst">&#123;netstat[i+<span class="number">4</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">        tasklist = subprocess.Popen(</span><br><span class="line">            <span class="string">f&#x27;tasklist|findstr \&quot;<span class="subst">&#123;netstat[i+<span class="number">4</span>]&#125;</span>\&quot;&#x27;</span>, stdout=subprocess.PIPE, shell=<span class="literal">True</span>).stdout.read().decode(<span class="string">&quot;utf-8&quot;</span>).split() <span class="comment"># 直接用Popen</span></span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">f&#x27;映像名称:<span class="subst">&#123;tasklist[<span class="number">0</span>]&#125;</span>  会话名:<span class="subst">&#123;tasklist[<span class="number">2</span>]&#125;</span>  会话#:<span class="subst">&#123;tasklist[<span class="number">3</span>]&#125;</span>  内存使用:<span class="subst">&#123;tasklist[<span class="number">4</span>]&#125;</span>&#x27;</span>,end=<span class="string">&quot;\n&lt;-------------------------------------------------------------------------&gt;\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;杀死进程指令taskkill /T /F /PID 进程PID&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="FastAPI跨域"><a href="#FastAPI跨域" class="headerlink" title="FastAPI跨域"></a>FastAPI跨域</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">origins = [</span><br><span class="line">    <span class="string">&quot;*&quot;</span></span><br><span class="line">]</span><br><span class="line">app.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=origins,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,</span><br><span class="line">    allow_methods=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">    allow_headers=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    判断是否素数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand_prime</span>(<span class="params">a: <span class="built_in">int</span> = <span class="number">1</span>, b: <span class="built_in">int</span> = <span class="number">100</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    在a和b的范围内随机输出一个素数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num = random.randint(a, b)</span><br><span class="line">        <span class="keyword">if</span> is_prime(num):</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relatively_prime</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    判断两数是否互质</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> gcd(a, b) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Chrimium的一些坑"><a href="#Chrimium的一些坑" class="headerlink" title="Chrimium的一些坑"></a>Chrimium的一些坑</h3><ul><li><p>这个浏览器不支持大部分视频网站的HTML5播放器，只能Flash</p></li><li><p>一些要使用Chrimium的第三方库或者其他的时候无法下载的话可以用镜像或者是下载来然后手动指定目录</p></li><li><p>镜像站是<a href="https://npm.taobao.org/mirrors/chromium-browser-snapshots/">https://npm.taobao.org/mirrors/chromium-browser-snapshots/</a></p></li></ul><h3 id="Openssl"><a href="#Openssl" class="headerlink" title="Openssl"></a>Openssl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key -extensions v3_req -config openssl.cnf</span><br></pre></td></tr></table></figure><h3 id="VScode-Jupyter"><a href="#VScode-Jupyter" class="headerlink" title="VScode Jupyter"></a>VScode Jupyter</h3><p>VScode里能用Jupyter，链接Jupyter服务器，不过是在本地的IPYNB 文件在服务器上运行。</p><h2 id="废弃项目归档"><a href="#废弃项目归档" class="headerlink" title="废弃项目归档"></a>废弃项目归档</h2><h3 id="Warframe高价值警报查看-已废弃"><a href="#Warframe高价值警报查看-已废弃" class="headerlink" title="Warframe高价值警报查看 #已废弃"></a>Warframe高价值警报查看 #已废弃</h3><p>5分钟检测一次，会返回节点名字和数据，判断方法是非I系入侵和奖励数量为1，非常简陋。</p><p>不过能设置已拥有（也就是不提示）物件啊什么的。</p><p>已经写成了QQ机器人，已上传到Github。   </p><p><a href="https://github.com/knight000/WF_valuableInvasion_CoolQ">https://github.com/knight000/WF_valuableInvasion_CoolQ</a> </p><p>异步是个好东西，可惜我不太会用….别再报错了啊!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetData</span>():</span><br><span class="line">    <span class="comment"># 从网站上获取数据，获取到的是字典</span></span><br><span class="line">    url = <span class="string">&quot;https://api.warframestat.us/pc/invasions&quot;</span>  <span class="comment"># 直接获取入侵的数据</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">               <span class="string">&#x27;Chrome/51.0.2704.63 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    req = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    res = urllib.request.urlopen(req)</span><br><span class="line">    data = json.loads(res.read())</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetZh</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 用于翻译</span></span><br><span class="line">    <span class="built_in">str</span>(name)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\VScode\\WFA_Lexicon\\WFA_Lexicon\\WF_Dict.json&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 翻译文件来自https://github.com/Richasy/WFA_Lexicon</span></span><br><span class="line">        wfDictList = json.load(f)</span><br><span class="line">    <span class="keyword">for</span> list1 <span class="keyword">in</span> wfDictList:</span><br><span class="line">        wfDict = <span class="built_in">dict</span>(list1)</span><br><span class="line">        <span class="keyword">if</span> wfDict[<span class="string">&#x27;en&#x27;</span>] == name:</span><br><span class="line">            <span class="keyword">return</span> wfDict[<span class="string">&#x27;zh&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CheckRepeat</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">id</span> <span class="keyword">in</span> RepeatID:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        RepeatID.add(<span class="built_in">id</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">UseInvasionData</span>(<span class="params">invasions</span>):</span><br><span class="line">    <span class="comment"># 暂时只写了入侵的功能</span></span><br><span class="line">    <span class="comment"># invasions = data[&quot;invasions&quot;] #以后可能要用，就留着了</span></span><br><span class="line">    ReturnData = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> invasions:</span><br><span class="line">        dict1 = <span class="built_in">dict</span>(a)</span><br><span class="line">        <span class="keyword">if</span> CheckRepeat(dict1[<span class="string">&#x27;id&#x27;</span>]):</span><br><span class="line">            <span class="comment"># 去重</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> dict1[<span class="string">&#x27;completion&#x27;</span>] &lt;= <span class="number">0</span> <span class="keyword">or</span> dict1[<span class="string">&#x27;completion&#x27;</span>] &gt;= <span class="number">100</span>:</span><br><span class="line">            <span class="comment"># RepeatID.remove(dict1[&#x27;id&#x27;])  # 去掉已过期的入侵，但是好像没必要就注释掉了</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> dict1[<span class="string">&#x27;vsInfestation&#x27;</span>] == <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 过滤掉I系相关的入侵，因为没有部件</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        attacker = <span class="built_in">dict</span>(dict1[<span class="string">&#x27;attackerReward&#x27;</span>])</span><br><span class="line">        attackerItem = attacker[<span class="string">&#x27;countedItems&#x27;</span>]</span><br><span class="line">        attackerItem = <span class="built_in">dict</span>(attackerItem[<span class="number">0</span>])</span><br><span class="line">        defender = <span class="built_in">dict</span>(dict1[<span class="string">&#x27;defenderReward&#x27;</span>])</span><br><span class="line">        defenderItem = defender[<span class="string">&#x27;countedItems&#x27;</span>]</span><br><span class="line">        defenderItem = <span class="built_in">dict</span>(defenderItem[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 这里是已拥有的就不提示</span></span><br><span class="line">        <span class="keyword">if</span> GetZh(attackerItem[<span class="string">&#x27;type&#x27;</span>]) <span class="keyword">in</span> Gotlist <span class="keyword">and</span> GetZh(defenderItem[<span class="string">&#x27;type&#x27;</span>]) <span class="keyword">in</span> Gotlist:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># if dict1[&#x27;rewardTypes&#x27;] in highvalue:</span></span><br><span class="line">        <span class="keyword">if</span> attackerItem[<span class="string">&#x27;count&#x27;</span>] == <span class="number">1</span> <span class="keyword">or</span> defenderItem[<span class="string">&#x27;count&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 用奖励的数量来判断是不是武器部件</span></span><br><span class="line">            node = dict1[<span class="string">&#x27;node&#x27;</span>]</span><br><span class="line">            completion = <span class="built_in">str</span>(<span class="built_in">int</span>(dict1[<span class="string">&#x27;completion&#x27;</span>]))</span><br><span class="line">            ReturnData = ReturnData+<span class="string">&quot;节点:&quot;</span>+node+<span class="string">&quot;，奖励是:[&quot;</span> + \</span><br><span class="line">                GetZh(attackerItem[<span class="string">&#x27;type&#x27;</span>])+<span class="string">&#x27;]和[&#x27;</span> + \</span><br><span class="line">                GetZh(defenderItem[<span class="string">&#x27;type&#x27;</span>])+<span class="string">&quot;]当前进度：&quot;</span>+completion+<span class="string">&quot;%\n&quot;</span></span><br><span class="line">            <span class="keyword">if</span> GetZh(attackerItem[<span class="string">&#x27;type&#x27;</span>]) <span class="keyword">in</span> Gotlist:</span><br><span class="line">                ReturnData = ReturnData + \</span><br><span class="line">                    <span class="string">&quot;其中[&quot;</span>+GetZh(attackerItem[<span class="string">&#x27;type&#x27;</span>])+<span class="string">&quot;]已拥有\n&quot;</span></span><br><span class="line">            <span class="keyword">if</span> GetZh(defenderItem[<span class="string">&#x27;type&#x27;</span>]) <span class="keyword">in</span> Gotlist:</span><br><span class="line">                ReturnData = ReturnData + \</span><br><span class="line">                    <span class="string">&quot;其中[&quot;</span>+GetZh(defenderItem[<span class="string">&#x27;type&#x27;</span>])+<span class="string">&quot;]已拥有\n&quot;</span></span><br><span class="line">    <span class="keyword">return</span> ReturnData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SaveList</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 预留以后拿来添加已获取物件的功能</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;data.list&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> data:</span><br><span class="line">        f.write(w+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ReadList</span>():</span><br><span class="line">    data = []</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;data.list&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    data = f.read()</span><br><span class="line">    data = data.splitlines()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Gotlist = ReadList()  <span class="comment"># 这里在文件data.list里填写已获得的物品中文名字，注意不要打错，要和WF_Dict.json里的一样，用回车键分隔开</span></span><br><span class="line">RepeatID = <span class="built_in">set</span>()  <span class="comment"># 这里是记录已提醒的集合</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    check = UseInvasionData(GetData())</span><br><span class="line">    <span class="keyword">if</span> check != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;现在时间是：&quot;</span>, time.asctime(time.localtime(time.time())))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发现高价值入侵：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(check)</span><br><span class="line">    time.sleep(<span class="number">300</span>)  <span class="comment"># 五分钟运行一次</span></span><br></pre></td></tr></table></figure><h3 id="蓝奏云上传QQbot-已废弃"><a href="#蓝奏云上传QQbot-已废弃" class="headerlink" title="蓝奏云上传QQbot #已废弃"></a>蓝奏云上传QQbot #已废弃</h3><p>命令<code>#upload</code></p><p>接收到命令的bot会调用<a href="https://github.com/zaxtyson/LanZouCloud-API">LanZouCloud-API</a> ,把已下载的文件夹里的全部文件上传，因为API的特性不会上传子文件夹，所以调用os.system，把成功上传的文件都剪切到同个目录的文件夹<strong>已上传</strong>里，因为用的LanZouCloud-API能自动解决超出文件大小限制和可上传文件的限制，所以用这个方法上传的话应该不会出什么问题，至于客户端那边就用 <a href="https://github.com/zaxtyson/LanZouCloud-CMD">LanZouCloud-CMD</a> 这个很成熟的工具解决。</p><blockquote><p>说不定以后能让机器人下载&gt;自动上传这样整，不过我是暂时不行的啦，现在瞎搞的机器人除了查wf和爬dxy之外就没什么自己写的功能了，上面说的功能还没开始写:D</p></blockquote><p>由于各种原因，此项目已废弃。</p><h3 id="备忘录-已废弃"><a href="#备忘录-已废弃" class="headerlink" title="备忘录 #已废弃"></a>备忘录 #已废弃</h3><p>这是备忘录不是黑历史记录器啊喂！</p><blockquote><p>因为没有酷Q Pro不能存图所以就没写图片保存</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nonebot <span class="keyword">import</span> on_command, CommandSession</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SaveList</span>(<span class="params">data, fileID</span>):</span><br><span class="line">    fileID = <span class="string">&#x27;memo\\&#x27;</span>+<span class="built_in">str</span>(fileID)+<span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;memo&#x27;</span>) == <span class="literal">False</span>:</span><br><span class="line">        os.mkdir(<span class="string">&#x27;memo&#x27;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(fileID, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    f.write(data+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ReadList</span>(<span class="params">fileID</span>):</span><br><span class="line">    fileID = <span class="string">&#x27;memo\\&#x27;</span>+<span class="built_in">str</span>(fileID)+<span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;memo&#x27;</span>) == <span class="literal">False</span>:</span><br><span class="line">        os.mkdir(<span class="string">&#x27;memo&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(fileID, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> :</span><br><span class="line">        f = <span class="built_in">open</span>(fileID, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    data = []</span><br><span class="line">    data = f.read()</span><br><span class="line">    data = data.splitlines()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        removeNum = data.count(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(removeNum):</span><br><span class="line">            data.remove(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DelList</span>(<span class="params">number, data, fileID</span>):</span><br><span class="line">    <span class="keyword">del</span> data[number]</span><br><span class="line">    fileID = <span class="string">&#x27;memo\\&#x27;</span>+<span class="built_in">str</span>(fileID)+<span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;memo&#x27;</span>) == <span class="literal">False</span>:</span><br><span class="line">        os.mkdir(<span class="string">&#x27;memo&#x27;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(fileID, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> data:</span><br><span class="line">        f.write(w+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@on_command(<span class="params"><span class="string">&#x27;SaveMemo&#x27;</span>, aliases=(<span class="params"><span class="string">&#x27;memoadd&#x27;</span>, <span class="string">&#x27;添加备忘录&#x27;</span></span>), only_to_me=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">SaveMemo</span>(<span class="params">session: CommandSession</span>):</span><br><span class="line">    user_id = session.ctx[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">    session.state[<span class="string">&#x27;memo&#x27;</span>] = session.current_arg_text.strip()</span><br><span class="line">    memo = session.get(<span class="string">&#x27;memo&#x27;</span>, prompt=<span class="string">&#x27;请输入你要添加的备忘录&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        SaveList(memo, user_id)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        session.finish(<span class="string">&#x27;储存失败&#x27;</span>)</span><br><span class="line">    session.finish(<span class="string">&#x27;已储存至备忘录&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@on_command(<span class="params"><span class="string">&#x27;ReadMemo&#x27;</span>, aliases=(<span class="params"><span class="string">&#x27;memo&#x27;</span>, <span class="string">&#x27;读取备忘录&#x27;</span>, <span class="string">&#x27;readmemo&#x27;</span></span>), only_to_me=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">ReadMemo</span>(<span class="params">session: CommandSession</span>):</span><br><span class="line">    user_id = session.ctx[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user_name = session.ctx[<span class="string">&#x27;sender&#x27;</span>][<span class="string">&#x27;card&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        user_name = session.ctx[<span class="string">&#x27;sender&#x27;</span>][<span class="string">&#x27;nickname&#x27;</span>]</span><br><span class="line">    read = ReadList(user_id)</span><br><span class="line">    <span class="keyword">if</span> read == []:</span><br><span class="line">        session.finish(<span class="string">&#x27;无备忘录记录&#x27;</span>)</span><br><span class="line">    message = user_name+<span class="string">&quot;的备忘录记录为：&quot;</span></span><br><span class="line">    memonum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> read:</span><br><span class="line">        message += <span class="string">&quot;\n[&quot;</span>+<span class="built_in">str</span>(memonum)+<span class="string">&quot;]&quot;</span>+m</span><br><span class="line">        memonum += <span class="number">1</span></span><br><span class="line">    session.finish(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@on_command(<span class="params"><span class="string">&#x27;DelMemo&#x27;</span>, aliases=(<span class="params"><span class="string">&#x27;memodel&#x27;</span>, <span class="string">&#x27;删除备忘录&#x27;</span>, <span class="string">&#x27;delmemo&#x27;</span></span>), only_to_me=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">DelMemo</span>(<span class="params">session: CommandSession</span>):</span><br><span class="line">    user_id = session.ctx[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">    session.state[<span class="string">&#x27;delmemo&#x27;</span>] = session.current_arg_text.strip()</span><br><span class="line">    delmemo = session.get(<span class="string">&#x27;delmemo&#x27;</span>, prompt=<span class="string">&#x27;请输入你要删除的备忘录序号&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        delmemo = <span class="built_in">int</span>(delmemo)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        session.finish(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line">    read = ReadList(user_id)</span><br><span class="line">    <span class="keyword">if</span> delmemo &gt; <span class="built_in">len</span>(read) - <span class="number">1</span>:</span><br><span class="line">        session.finish(<span class="string">&#x27;超出范围，删除失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            DelList(delmemo, read, user_id)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            session.finish(<span class="string">&#x27;删除失败&#x27;</span>)</span><br><span class="line">        session.finish(<span class="string">&#x27;删除备忘录成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@on_command(<span class="params"><span class="string">&#x27;HelpMemo&#x27;</span>, aliases=(<span class="params"><span class="string">&#x27;memohelp&#x27;</span>,<span class="string">&#x27;备忘录帮助&#x27;</span></span>), only_to_me=<span class="literal">False</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">HelpMemo</span>(<span class="params">session: CommandSession</span>):</span><br><span class="line">    message = <span class="string">&#x27;#memoadd [备忘录内容]\n#添加备忘录 [备忘录内容]  添加备忘录\n#memo 读取备忘录 \n#readmemo  读取备忘录\n#memodel [序号]\n#删除备忘录 [序号]\n#delmemo [序号]  删除备忘录\n示例：\n#memoadd 这是一条备忘录\n#memodel 0&#x27;</span></span><br><span class="line">    session.finish(message)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉计划</title>
      <link href="/2019/10/28/projecteuler/"/>
      <url>/2019/10/28/projecteuler/</url>
      
        <content type="html"><![CDATA[<p>欧拉计划中文翻译站：<a href="https://pe-cn.github.io/">https://pe-cn.github.io/</a><br>欧拉计划原站：<a href="https://projecteuler.net/">https://projecteuler.net/</a><br>这里引用一下网站上的介绍：</p><blockquote><p>欧拉计划是一系列有挑战性的数学与计算机编程题；要解开它们，需要的不止是数学知识：尽管数学能够帮助你找到一些优雅而有效的方法，大多数题目仍需要借助计算机和编程技巧来完成解答。<br>创立欧拉计划的初衷，以及不断维持其运行的动力，在于为好奇的头脑提供一个平台，使他们能够在有趣愉悦的氛围中，探索未知领域，学习新的知识。</p></blockquote><p>总而言之，就是一些有趣的数学与编程题目，感谢<a href="http://toyomu.abn-team.top/">@Toyomu</a>告诉了我这个网站。</p><span id="more"></span><p>好久没去写了…本人大概…坑了。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>本篇中的原题翻译均来自<a href="https://pe-cn.github.io/">欧拉计划中文翻译站</a></p></blockquote><p>解法非最佳解法，仅仅是自娱自乐（？？？）<br>提交答案之后，可以在<a href="https://projecteuler.net/archives">这个页面</a>看到别人的解法。</p><h3 id="Problem-1-Multiples-of-3-and-5"><a href="#Problem-1-Multiples-of-3-and-5" class="headerlink" title="Problem 1 Multiples of 3 and 5"></a>Problem 1 Multiples of 3 and 5</h3><blockquote><p>3的倍数和5的倍数<br>如果我们列出10以内所有3或5的倍数，我们将得到3、5、6和9，这些数的和是23。<br>求1000以内所有3或5的倍数的和。</p></blockquote><p>直接用Python暴力…</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">3</span>==<span class="number">0</span> <span class="keyword">or</span> i%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">        s=s+i</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h3 id="Problem-2-Even-Fibonacci-numbers"><a href="#Problem-2-Even-Fibonacci-numbers" class="headerlink" title="Problem 2 Even Fibonacci numbers"></a>Problem 2 Even Fibonacci numbers</h3><blockquote><p>偶斐波那契数<br>斐波那契数列中的每一项都是前两项的和。由1和2开始生成的斐波那契数列前10项为：<br>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …<br>考虑该斐波那契数列中不超过四百万的项，求其中为偶数的项之和。</p></blockquote><p>依旧是Python暴力hh</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">2</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">4000000</span>:</span><br><span class="line">    i = a+b</span><br><span class="line">    a = b</span><br><span class="line">    b = i</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        s = s+i</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h3 id="Problem-3-Largest-prime-factor"><a href="#Problem-3-Largest-prime-factor" class="headerlink" title="Problem 3 Largest prime factor"></a>Problem 3 Largest prime factor</h3><blockquote><p>最大质因数<br>13195的所有质因数为5、7、13和29。<br>600851475143最大的质因数是多少？</p></blockquote><p>使用while和if语句就可以轻松实现</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">n = <span class="number">600851475143</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> n % a == <span class="number">0</span>:</span><br><span class="line">        b = a</span><br><span class="line">        n = n / a</span><br><span class="line">        <span class="keyword">while</span> n % a == <span class="number">0</span>:</span><br><span class="line">            n = n / a</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; math.sqrt(<span class="number">600851475143</span>)):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h3 id="Problem-4-Largest-palindrome-product"><a href="#Problem-4-Largest-palindrome-product" class="headerlink" title="Problem 4 Largest palindrome product"></a>Problem 4 Largest palindrome product</h3><blockquote><p>最大回文乘积<br>回文数就是从前往后和从后往前读都一样的数。由两个2位数相乘得到的最大回文乘积是 9009 &#x3D; 91 × 99。<br>找出由两个3位数相乘得到的最大回文乘积。</p></blockquote><p>Python的切片十分简单，所以可以很轻易地验证是否为回文数。<br>通过for循环暴力…咳咳。<br>(特别鸣谢：<a href="http://toyomu.abn-team.top/">@Toyomu</a>))</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">asw = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">999</span>, <span class="number">100</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">999</span>, <span class="number">100</span>, -<span class="number">1</span>):</span><br><span class="line">        lst = <span class="built_in">list</span>(<span class="built_in">str</span>(a*b))</span><br><span class="line">        <span class="keyword">if</span> lst == lst[::-<span class="number">1</span>]:</span><br><span class="line">            asw.append(a*b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(asw))</span><br></pre></td></tr></table></figure><h3 id="Problem-5-Smallest-multiple"><a href="#Problem-5-Smallest-multiple" class="headerlink" title="Problem 5 Smallest multiple"></a>Problem 5 Smallest multiple</h3><blockquote><p>最小倍数<br>2520是最小的能够被1到10整除的数。<br>最小的能够被1到20整除的正数是多少？</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#20以内的素数有：2,3,5,7,11,13,17,19</span></span><br><span class="line"><span class="comment">#然后这些素数在20以内的最高次方的数是：16,9,5,7,11,13,17,19</span></span><br><span class="line"><span class="comment">#把这些相乘，得到结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">16</span>*<span class="number">9</span>*<span class="number">5</span>*<span class="number">7</span>*<span class="number">11</span>*<span class="number">13</span>*<span class="number">17</span>*<span class="number">19</span>)</span><br></pre></td></tr></table></figure><h3 id="Problem-6-Sum-square-difference"><a href="#Problem-6-Sum-square-difference" class="headerlink" title="Problem 6 Sum square difference"></a>Problem 6 Sum square difference</h3><blockquote><p>平方的和与和的平方之差<br>前十个自然数的平方的和是<br>12 + 22 + … + 102 &#x3D; 385<br>前十个自然数的和的平方是<br>(1 + 2 + … + 10)2 &#x3D; 552 &#x3D; 3025<br>因此前十个自然数的平方的和与和的平方之差是 3025 − 385 &#x3D; 2640。<br>求前一百个自然数的平方的和与和的平方之差。</p></blockquote><p>非常简单，直接一个循环搞定</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">0</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    c = a ** <span class="number">2</span>+c</span><br><span class="line">    b = a+b</span><br><span class="line"><span class="built_in">print</span>(b**<span class="number">2</span> - c)</span><br></pre></td></tr></table></figure><h3 id="Problem-7-10001st-prime"><a href="#Problem-7-10001st-prime" class="headerlink" title="Problem 7 10001st prime"></a>Problem 7 10001st prime</h3><blockquote><p>第10001个素数<br>列出前6个素数，它们分别是2、3、5、7、11和13。我们可以看出，第6个素数是13。<br>第10,001个素数是多少？</p></blockquote><p><a href="https://zh.moegirl.org/%E6%81%A9%E9%87%8C%E5%85%8B%C2%B7%E6%99%AE%E5%A5%87"><strong>@普奇神父</strong></a>:“冷静下来，先数质数”<br>我们应该让Python很冷静的去数质数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">f = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">10001</span>:</span><br><span class="line">    a = a+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, a, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> a % d == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        asw = a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(asw)</span><br></pre></td></tr></table></figure><h3 id="Problem-8-Largest-product-in-a-series"><a href="#Problem-8-Largest-product-in-a-series" class="headerlink" title="Problem 8 Largest product in a series"></a>Problem 8 Largest product in a series</h3><blockquote><p>连续数字最大乘积<br>在下面这个1000位正整数中，连续4个数字的最大乘积是 9 × 9 × 8 × 9 &#x3D; 5832。<br>73167176531330624919225119674426574742355349194934<br>96983520312774506326239578318016984801869478851843<br>85861560789112949495459501737958331952853208805511<br>12540698747158523863050715693290963295227443043557<br>66896648950445244523161731856403098711121722383113<br>62229893423380308135336276614282806444486645238749<br>30358907296290491560440772390713810515859307960866<br>70172427121883998797908792274921901699720888093776<br>65727333001053367881220235421809751254540594752243<br>52584907711670556013604839586446706324415722155397<br>53697817977846174064955149290862569321978468622482<br>83972241375657056057490261407972968652414535100474<br>82166370484403199890008895243450658541227588666881<br>16427171479924442928230863465674813919123162824586<br>17866458359124566529476545682848912883142607690042<br>24219022671055626321111109370544217506941658960408<br>07198403850962455444362981230987879927244284909188<br>84580156166097919133875499200524063689912560717606<br>05886116467109405077541002256983155200055935729725<br>71636269561882670428252483600823257530420752963450<br>找出这个1000位正整数中乘积最大的连续13个数字。它们的乘积是多少？</p></blockquote><p>第一眼看过去….<br>冷静下来，想想，其实用python解决这个不太难<br>直接把所有数输进去再通过循环语句和判断语句来实现逐个相乘然后输出最大的乘积，其实也挺简单的。<br>（但是还是出了点小岔子…咳咳）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">que = <span class="built_in">list</span>(<span class="built_in">str</span>(<span class="number">7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450</span>))</span><br><span class="line">asw = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">988</span>):</span><br><span class="line">    cache = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">13</span>):</span><br><span class="line">        cache = cache*<span class="built_in">int</span>(que[i+a])</span><br><span class="line">    <span class="keyword">if</span> asw &lt; cache:</span><br><span class="line">        asw = cache</span><br><span class="line"><span class="built_in">print</span>(asw)</span><br></pre></td></tr></table></figure><h3 id="Problem-9-Special-Pythagorean-triplet"><a href="#Problem-9-Special-Pythagorean-triplet" class="headerlink" title="Problem 9 Special Pythagorean triplet"></a>Problem 9 Special Pythagorean triplet</h3><blockquote><p>特殊毕达哥拉斯三元组<br>毕达哥拉斯三元组是三个自然数a &lt; b &lt; c组成的集合，并满足<br>a2 + b2 &#x3D; c2<br>例如，32 + 42 &#x3D; 9 + 16 &#x3D; 25 &#x3D; 52。<br>有且只有一个毕达哥拉斯三元组满足 a + b + c &#x3D; 1000。求这个三元组的乘积abc。</p></blockquote><p>当我第一眼看到的时候，想到的是两个字：暴力，于是写出了以下代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    b = a + <span class="number">1</span></span><br><span class="line">    c = b + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b &lt;= <span class="number">1000</span>-a-c:</span><br><span class="line">        <span class="keyword">while</span> c &lt;= <span class="number">1000</span>-a-b:</span><br><span class="line">            <span class="keyword">if</span> a**<span class="number">2</span>+b**<span class="number">2</span> == c**<span class="number">2</span> <span class="keyword">and</span> a+b+c == <span class="number">1000</span>:</span><br><span class="line">                <span class="built_in">print</span>(a*b*c)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c = c + <span class="number">1</span></span><br><span class="line">        b = b + <span class="number">1</span></span><br><span class="line">        c = b + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>当然，答案是能算出来，不过时间嘛…<br>在Toyomu的启发下，优(重)化(写)了下，但还不是最佳解法就是了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">998</span>, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, c, <span class="number">1</span>):</span><br><span class="line">        a = <span class="number">1000</span>-b-c</span><br><span class="line">        <span class="keyword">if</span> a**<span class="number">2</span>+b**<span class="number">2</span> == c**<span class="number">2</span> <span class="keyword">and</span> a &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(a*b*c)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="11题往后的-Toyomu的解法"><a href="#11题往后的-Toyomu的解法" class="headerlink" title="11题往后的@Toyomu的解法"></a>11题往后的@Toyomu的解法</h3><p><a href="http://toyomu.abn-team.top/">请点这里，超棒的.jpg</a></p><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Python </tag>
            
            <tag> 欧拉计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO搭建博客，并发布到Github上</title>
      <link href="/2019/10/05/hexo-build/"/>
      <url>/2019/10/05/hexo-build/</url>
      
        <content type="html"><![CDATA[<h2 id="拥有一个GITHUB账号和仓库"><a href="#拥有一个GITHUB账号和仓库" class="headerlink" title="拥有一个GITHUB账号和仓库"></a>拥有一个GITHUB账号和仓库</h2><blockquote><p>如果你已经有了请跳过这一步骤</p></blockquote><h4 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h4><p>首先，进入<a href="https://github.com/">https://github.com/</a>，你会看到以下的界面<br><img src="https://s2.ax1x.com/2019/10/05/uswY90.png" alt="Github注册界面"><br><strong>Username</strong>:是你账号显示的名称，也是别人搜索你的时候的名字，建立博客时也要用到，建议起一个简单好记的名字<br><strong>Email</strong>:可以用来登录之类的东西，不用解释了吧。<br><strong>Password</strong>:…记得设置的别太简单了，当然也不要把它忘了。<br>填写好了之后，点击下面的<strong>Sign up for Github</strong>，然后按照提示去做，你就拥有你的Github账户了。</p><span id="more"></span><h4 id="绑定SSH"><a href="#绑定SSH" class="headerlink" title="绑定SSH"></a>绑定SSH</h4><p>你需要安装一个Git，请<a href="https://git-scm.com/download/win">点击这里去官网下载</a><br>安装的时候一直默认就好，安装完成之后，打开CMD，Powershell或者Git Bash，依次输入以下3条指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>完成之后会自动在C:\Users[你的windows用户名]里面创建一个叫.ssh的文件夹，打开里面就多了3个文件：</p><blockquote><p>id_rsa<br>id_rsa.pub<br>known_hosts</p></blockquote><p>打开id_rsa.pub，把里面的内容复制，然后在<a href="https://github.com/settings/keys">https://github.com/settings/keys</a>里面点击<strong>SSH and GPG keys</strong>，然后点击<strong>New SSH key</strong>这个绿框框，Title是标题，自己填个就好，在key一栏里面把你从id_rsa.pub里面复制的东西粘贴进去，点击<strong>Add SSH key</strong>，这样就添加成功了。<br>之后可以在你的计算机上输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><p>如果输出是</p><blockquote><p>PTY allocation request failed on channel 0<br>Hi 你的github用户名! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed.</p></blockquote><p>就证明你成功了</p><h4 id="建立你的repository"><a href="#建立你的repository" class="headerlink" title="建立你的repository"></a>建立你的repository</h4><p>点击New repository创建，名称为[你的用户名.github.io]，用户名就是之前创建时填的<strong>Username</strong>。<br>然后复制SSH，后面修改_config.yml会用到，拿来发布到github的时候用。<br><img src="https://s2.ax1x.com/2019/10/05/uswGhq.png" alt="Githubssh"></p><h2 id="安装Nodejs和hexo"><a href="#安装Nodejs和hexo" class="headerlink" title="安装Nodejs和hexo"></a>安装Nodejs和hexo</h2><p>首先，进入官网，下载nodejs，<a href="https://nodejs.org/en/download/">点击这里进入nodejs官网</a><br>安装好之后，运行<strong>Node.js command prompt</strong>，输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>等待读条完毕后，创建一个<strong>空文件夹</strong>，然后使用cd [路径]或者直接shift+右键，点击在此处打开powershell或者命令提示符，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这样就完成了hexo的初始化<br>要测试的话，在这时候输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后在浏览器里输入<a href="http://localhost:4000/">http://localhost:4000</a>就能看到一个hexo的初始页面了。<br>记得安装github部署插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="设置-config-yml"><a href="#设置-config-yml" class="headerlink" title="设置_config.yml"></a>设置_config.yml</h2><p>进入你创建的博客文件夹，里面有一个文件，叫做_config.yml，它是你博客的配置文件，修改它，达到你所需要的效果。<br>以下讲一些基础的设置吧。<br><strong>title</strong>:网站的标题，显示在标签栏和网站中。<br><strong>subtitle</strong>:可以理解为副标题。<br><strong>description</strong>:网站描述，会显示在网站中。<br><strong>author</strong>:用户名，显示在网站中的各种地方。<br><strong>language</strong>:语言，这里填hexo主题所提供的语言包的名称，在themes\主题名称\languages这个目录下，有很多.yml文件，像是zh-CN.yml就在这一栏填写zh-CN<br><strong>timezone</strong>:时区，建议填写Asia&#x2F;Shanghai<br>然后翻下去，找到<br><strong>theme</strong>:这里填写你的主题名称，主题可以在<a href="https://hexo.io/themes/">https://hexo.io/themes/</a>里面找到。<br>接下来就是设置<strong>deploy</strong>了，在文件中找到<strong>deploy</strong>这一栏，按照以下方式填写:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">之前复制的项目SSH</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>设置好之后记得保存。<br>这个时候输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后等读条完毕后访问[你的github用户名.github.io]就能看见你的页面了。</p><h2 id="安装并修改主题"><a href="#安装并修改主题" class="headerlink" title="安装并修改主题"></a>安装并修改主题</h2><p><strong>这里以NEXT主题为例</strong><br><a href="https://github.com/theme-next/hexo-theme-next">主题Github</a><br><a href="http://theme-next.iissnan.com/">主题官网</a><br>进入你的博客文件夹，打开命令窗口[cmd,powershell,gitbash都可以]，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>等待读条完毕，你就会发现你的博客文件夹里面的themes目录下，多了个next文件夹，进去修改_config.yml以达成你想要的效果，主题官网上已有强大的说明，这里就不再做叙述。</p><ul><li>注意大小写，特别是文件和图片的引用。</li></ul><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>若你要绑定域名，请在[你的博客文件夹\source]这个目录里面，新建一个 名为CNAME的文件[<strong>注意:无任何后缀名,可新建一个文本文档然后删除掉后缀名</strong>]，打开并编辑，把你要绑定的域名写进去，然后在域名提供商的解析那里设置CNAME，填上[你的github用户名.github.io]就可以了。<br>然后编辑_config.yml，找到**skip_render:**这一栏，把CNAME添加进去，如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">README.md</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">CNAME</span></span><br></pre></td></tr></table></figure><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>hexo的新建文章非常简单，在你的博客文件夹下，运行指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;文章名&quot;</span></span><br></pre></td></tr></table></figure><p>就会自动在[你的博客文件夹\source_posts]创建一个[文章名.md]文件，使用markdown语法修改它，然后保存就可以了。<br>在生成的文章最上层，有默认生成的</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 你的文章名</span><br><span class="line">date: 生成的时间</span><br><span class="line">tags: 标签请自己填</span><br></pre></td></tr></table></figure><p>完善它。<br>完成后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后等读条完毕后访问你的博客地址就能看见了。<br>不过建议用hexo d发布前先用hexo s在本地预览一下情况。</p><h2 id="标签和归档"><a href="#标签和归档" class="headerlink" title="标签和归档"></a>标签和归档</h2><p>next主题有自带的标签和归档，但是你依然要用指令来生成他们</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page archives</span><br></pre></td></tr></table></figure><p>当你在文章里使用了标签，就会在生成页面的时候自动生成一个归档，不过你需要编辑source\tags目录下的index.md，使用如下方式来添加对标签归档页面的链接，当然，你可以添加更多元素在此页面上。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">标签名</span>]<span class="string">(/tags/标签名)</span></span><br></pre></td></tr></table></figure><h2 id="标签的使用"><a href="#标签的使用" class="headerlink" title="标签的使用"></a>标签的使用</h2><p>在你的博客文件夹下，运行指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>然后进入[你的博客文件夹\source\tags]，修改 index.md文件以达到你想要的效果<br>在里面添加markdown语法的链接让进入此页面的人能进入到相关标签的页面</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">标签名</span>](<span class="link">/tags/标签名</span>)</span><br></pre></td></tr></table></figure><p>在主题的_config.yml文件里面，找到**menu:**这一栏，把#tags: &#x2F;tags&#x2F; || tags前面的注释号去掉。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>如果添加了其他页面请也去掉前面的注释号。<br>添加标签请再文章最上面生成的tags:里面修改，如果要添加多个标签请这么写:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> 标签1</span><br><span class="line"><span class="bullet">-</span> 标签2</span><br><span class="line"><span class="bullet">-</span> 标签3</span><br></pre></td></tr></table></figure><h2 id="加入Github-corners"><a href="#加入Github-corners" class="headerlink" title="加入Github-corners"></a>加入Github-corners</h2><p>什么是<strong>Github-corners</strong>？就是这个网页右上角的那个按钮，点击就可以跳转到你所需要的链接，以下链接能生成所需要代码: <a href="http://tholman.com/github-corners/">http://tholman.com/github-corners/ </a></p><p>然后在你的<strong>博客根目录\themes\主题\layout</strong>里面，找到**_layout.swig**，打开它，找到以下内容</p><figure class="highlight svg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">&quot;http://schema.org/WebPage&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;&#123;&#123; page.lang or page.language or config.language &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&#123;%- if theme.motion.enable %&#125; use-motion&#123;%- endif %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;headband&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后把你从网页上复制的内容粘贴进去，再根据自己修改，比如这样:</p><figure class="highlight svg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">&quot;http://schema.org/WebPage&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;&#123;&#123; page.lang or page.language or config.language &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&#123;%- if theme.motion.enable %&#125; use-motion&#123;%- endif %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;headband&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;你的GITHUB地址&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;<span class="number">0%</span>,<span class="number">100%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;<span class="number">20%</span>,<span class="number">60%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;<span class="number">40%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后发布就可以了。</p><h2 id="加入搜索功能"><a href="#加入搜索功能" class="headerlink" title="加入搜索功能"></a>加入搜索功能</h2><p>因为用第三方搜索效果虽然好，但是有点麻烦而且有因为第三方的问题导致失效的可能，所以这里介绍的是本地搜索的功能。</p><p><a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a> </p><p>首先，在<strong>博客的文件夹</strong>执行安装指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>确定安装完毕后，在<strong>博客配置文件</strong>添加以下设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>上面的是默认设置，其中<strong>field</strong>这一栏决定了搜索的范围，个人是<strong>all</strong>，然后下面贴出官方的介绍</p><blockquote><ul><li><p><strong>path</strong> - file path. By default is <code>search.xml</code> . If the file extension is <code>.json</code>, the output format will be JSON. Otherwise XML format file will be exported.</p></li><li><p>field - the search scope you want to search, you can chose:</p><ul><li><strong>post</strong> (Default) - will only covers all the posts of your blog.</li><li><strong>page</strong> - will only covers all the pages of your blog.</li><li><strong>all</strong> - will covers all the posts and pages of your blog.</li></ul></li><li><p><strong>content</strong> - whether contains the whole content of each article. If <code>false</code>, the generated results only cover title and other meta info without mainbody. By default is <code>true</code>.</p></li></ul></blockquote><p>然后在<strong>主题配置文件</strong>找到<strong>local_search</strong>这一栏，<strong>enable</strong>改为true，其他根据自己需要修改，这里贴出我的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后部署，就能看到搜索按钮了</p><h2 id="设置摘要"><a href="#设置摘要" class="headerlink" title="设置摘要"></a>设置摘要</h2><p>next默认是在首页展示全部的文章内容，这样很影响观感，next自带自动摘要的功能…呃…或者说，曾经，修改配置文件为true的方法已经失效了。但通过在文章中添加<code>&lt;!-- more --&gt;</code>依然可以生效。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt (Not recommend).</span></span><br><span class="line"><span class="comment"># Use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>如果需要自动摘要，可以参考下这个<a href="https://lxxself.com/2020-03-17-%E8%AE%B0%E5%BD%95/%E4%BF%AE%E6%94%B9Next%E4%B8%BB%E9%A2%98%E9%A6%96%E9%A1%B5%E6%91%98%E8%A6%81%E6%98%BE%E7%A4%BA/">链接</a>，修改源码，不过本人并未测试。</p><h2 id="加入Gitalk评论功能"><a href="#加入Gitalk评论功能" class="headerlink" title="加入Gitalk评论功能"></a>加入Gitalk评论功能</h2><p>首先，你需要一个<strong>OAuth App</strong>，进入<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a> 创建一个新的<strong>OAuth application</strong>，参数的话</p><table><thead><tr><th>RAW</th><th></th></tr></thead><tbody><tr><td>Application name</td><td>应用的名字，自定义</td></tr><tr><td>Homepage URL</td><td>这里填你blog的地址</td></tr><tr><td>Application description</td><td>应用描述，请随意也可以不填</td></tr><tr><td>Authorization callback URL</td><td>依然是你blog的地址</td></tr></tbody></table><p>完成后创建，得到<strong>Client ID</strong>和<strong>Client Secret</strong>。</p><p>然后打开blog主题的**_config.yml<strong>，以</strong>next**的为例。</p><p>找到这些内容，根据自己需要修改:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># Demo: https://gitalk.github.io</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#改为true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">你的GITHUB用户名</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">存放issues的仓库名，可以直接用存放blog的仓库</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">创建APP时得到的Client</span> <span class="string">ID</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">创建APP时得到的Client</span> <span class="string">Secret</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">你的GITHUB用户名和协作者用户名</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 语言，中文blog就zh-CN，什么语言的就填什么，上面有支持的范例</span></span><br></pre></td></tr></table></figure><p>修改后进行部署就完成了</p><h2 id="更新模块和主题"><a href="#更新模块和主题" class="headerlink" title="更新模块和主题"></a>更新模块和主题</h2><h3 id="主题更新"><a href="#主题更新" class="headerlink" title="主题更新"></a>主题更新</h3><p>主题更新是比较简单的了，因为下载主题的时候使用的是<code>git clone</code>，所以在主题目录使用<code>git pull</code>就可以更新了。</p><h3 id="模块更新"><a href="#模块更新" class="headerlink" title="模块更新"></a>模块更新</h3><p>模块更新需要用到npm的更新系统，可以借助<a href="https://github.com/raineorshine/npm-check-updates"><code>npm-check-updates</code></a>这个模块来进行更新</p><p>首先，安装<code>npm-check-updates</code>模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check-updates</span><br></pre></td></tr></table></figure><p>安装好之后，进入你blog的根目录，执行<code>ncu</code>指令，这个指令会检查<strong>package.json</strong>里的模块有无可更新，执行<code>ncu -u</code>直接更新全部可更新模块，当然你可以直接执行<code>ncu-u</code></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>目前能写的大概也就这么多，以后想到什么再更新吧..</p>]]></content>
      
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/20/hello-world/"/>
      <url>/2019/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="/tags/%E6%9D%82%E8%B0%88">杂谈</a></li><li><a href="/tags/%E5%BB%BA%E7%AB%99">建站</a></li><li><a href="/tags/hexo">hexo</a></li><li><a href="/tags/Github">Github</a></li><li><a href="/tags/%E6%AC%A7%E6%8B%89%E8%AE%A1%E5%88%92">欧拉计划</a></li><li><a href="/tags/%E5%AD%A6%E4%B9%A0">学习</a></li><li><a href="/tags/Python">Python</a></li><li><a href="/tags/Nginx">Nginx</a></li><li><a href="/tags/JS">JS</a></li><li><a href="/tags/Linux">Linux</a></li></ul>]]></content>
      
    </entry>
    
    
  
</search>
